{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to Data Structures and Algorithms, Autumn 2023  Syllabus and Class Information <p>   You can find our public class website with all information you need at: </p> <p> https://theevergreenstatecollege.github.io/upper-division-cs/dsa-23au/ </p> <p> which is mirrored to our Canvas site at </p> <p> https://canvas.evergreen.edu/courses/5926 </p> <p>.</p> <p> Our first class is on Tuesday Sept. 26th at 10am (PST) in Evans 2617 (Computer Center)      </p> <p>         Data Structures and Algorithms is a 12-credit upper division applied Computer Science program that is important for doing any additional advanced work in computer science and software engineering. Some students in the program have already studied data structures (DS &amp; A). Those students will be creating their own curriculum in groups. For students who want to learn DS &amp; A, the program syllabus will look like this:         </p> <p> <ul> <li>Data Structures and Algorithms;</li> <li>Team programming projects (with ChangeMakers)</li> <li>Synthesis of real-world problems with software modeling</li> <li>Software Engineering</li> </ul> </p> <p>         As computer science students, you will deepen your technical knowledge and skills required to understand, analyze, modify, and build complex software systems. The concepts and skills from Data Structures and Algorithms are key for software engineering and programming. Through this program you will also deepen your understanding of computing systems, both in theory and practice. The work will provide prerequisite knowledge for Evergreen's advanced computer science programs.\u00a0         </p> <p>         Working on team projects is very important for almost any job, especially in computer science. Also, at Evergreen we expect students to take charge of their learning. We make this easier by providing\u00a0 a caring and safe innovative team environment. This is ideal for those looking for a practical, hands-on approach to learning. This radically different pathway gives students the opportunity to set-up and run their own projects and ventures. Inspired by the pioneering Finnish \u2018Tiimiakatemia\u2019 approach, we designed this program collaboratively with the ChangeMaker Lab, which was the first to introduce this approach in the United States. The Tiimiakatemia ChangeMaker Lab is accredited by Tiimiakatemia Global\u00ae.         </p> <p>         In the first few weeks you will form a Team Company of up to 20 students, and work on real projects and research the programming, software engineering, and theoretical\u00a0 skills needed for those projects. You will gain entrepreneurial experience and learn how to operate and run an organization as a Holacratic structure. As a Team Entrepreneur, you\u2019ll work with your team in your own office environment virtually or in the classroom in our innovative open office space.\u00a0 You will create and manage projects around your passions, attend directors' meetings. You will have the opportunity to learn the auxiliary skills to manage budgets and build valuable contacts and networks.\u00a0         </p> <p>         You will learn by doing and specifically develop the following job skills: Self\u2010leadership skills, Project leading skills, Planning skills, Team Coaching skills, Strategic skills, Team leadership skills, Service, negotiation and selling skills, Understanding of financial issues, Marketing skills, Innovation skills, Team leadership skills, Data processing and IT \u2013skills, Team Learning skills, Creativity skills, International skills and Communication skills and work on developing Initiative, Courage to make choices and goal orientation.         </p> <p>         This full-time daytime program will be taught on the Olympia campus. Students who need to participate fully remotely should contact the faculty to discuss that option.         </p> <p>         Computer technology has an impact on almost anything we do, and data structures and algorithms are central to advanced study in computer science and to building large complex systems. When applying for positions such as Software Developer or Software Engineer, you will probably find that this program is the most important in helping you prepare for job interviews. In this program, you\u2019ll learn about ways to organize data (we\u2019ll see various data structures such as Lists, Trees, Graphs), ways to compare algorithms (we\u2019ll focus on space and time complexity using big Oh) and efficiently solve programming problems. It will also give you a chance to practice object-oriented and functional programming.         </p> <p>         We are so excited to work with all of you in this awesome program.         </p> <p>         We expect everyone to attend in person, unless you contact us to make alternative arrangements.         </p> Class Meeting Times <p>Monday</p> <p>Tuesday</p> <p>Wednesday</p> <p>Thursday</p> <p>Friday</p> 10am-1pm <p>Data Structures</p> <p>(Evans 2617)</p> <p>Systems and Teams</p> <p>(Evans 2617)</p> <p> </p> <p></p> <p>Data Structures</p> <p>(Evans 2617)</p> <p> </p> <p></p> 12noon-1pm <p> </p> <p></p> <p>Forest Walk</p> <p></p> <p>&amp;nbps;</p> <p></p> <p>break</p> <p></p> <p>tutoring</p> <p></p> 1-3pm <p>Cracking the Coding Interview / Software Engineering</p> <p>(Evans 2617)</p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> 3-5pm <p> </p> <p></p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> <p> </p> <p>Textbooks:</p> <p>Required</p> <ul> <li>The Algorithm Design Manual, 3rd edition, by Steven Skiena ()</li> <li>Cracking the Coding Interview \u2013 189 programming questions and solutions, Gayle Laakmann McDowell, 6th edition (CCI)ISBN-13: 978-0984782857 </li> </ul> <p>Optional</p> <ul> <li>Data Structures and Algorithms in Java, 3rd or 4th edition, by Mark Allen Weiss</li> <li>Dive into Systems (DIS)\u00a0 Dive Into Systems Text: https://diveintosystems.org/development/antora/diveintosystems/1.0/index.html</li> <li>Parallel computing for Beginners https://www.learnpdc.org/PDCBeginners2e/</li> </ul> Concrete Examples Synthesis and Lateral Thinking Week 1 <p>A Self-Guided Tour</p> <p>RAM Model, Lists</p> <p>Arrays, Links, Counters</p> <p>Interfaces, CRUD Operations</p> <p>IntelliJ and Git: practice and warmup</p> <p>Pair Programming: what roles? what rules?</p> <p>Learning Log, ChatGPT / AI prompting</p> <p>ChangeMaker teams, learning together</p> Week 2 <p>Implementation vs. Interfaces</p> <p>Stacks, Queues</p> <p>Key-Value Maps, Hashing</p> <p>Collisions, Links</p> <p>Time-Space and Other Dualities, Resources</p> <p>How to trade off time for space, vice versa?</p> <p>Combining two or more data structures</p> <p>Counting and visualizing resources: VisualVM</p> Week 3 <p>Asymptotic Analysis (Big O)</p> <p>Trees, Relations, Searching</p> <p>Traversals: Bread-first, Depth-First</p> <p>Heaps (Priority Queues)</p> <p>Recursion and Iteration</p> <p>Cleaning Up: Invariants, Rebalancing</p> <p>Combining two or more data structures</p> <p>Overview of Final Project: Problem-Finding</p> Week 4 <p>Rebalancing Trees</p> <p>Red-Black Trees</p> <p>Rebalancing Heaps</p> <p>Inventing New Data Structures</p> <p>An Exotic Zoo: Fibonacci Forest, Skip Lists</p> <p>Amortized Analysis</p> <p>Combining two or more data structures</p> <p>Final Project Work: Collecting / Mocking Datasets</p> Week 5 <p>Maximum Subset Sum</p> <p>Dynamic Programming</p> <p>Interval Scheduling</p> <p>Satisficing (Greedy)</p> <p>Subproblems</p> <p>Memoizing / Caching</p> <p>Combining two or more algorithms</p> <p>Final Project Work: Collecting Datasets</p> Week 6 <p>Graphs</p> <p>Topological Sort, Dependencies</p> <p>Shortest Path (Dijkstra's)</p> <p>Network Flow</p> <p>MapQuest / Google Maps</p> <p>Find algorithms in the news</p> <p>Final Project Work: Designing Operations</p> <p>AI proompting and co-pilot: write code</p> Week 7 <p>Sorting, with Heaps and Trees</p> <p>Merge Sort</p> <p>Quicksort</p> <p>Radix Sort</p> <p>Randomized analysis</p> <p>Combining two sorts</p> <p>Joke Sorts: delay as much as possible</p> <p>Art: Pixel sorting</p> Week 8 <p>Database Indexes, Search</p> <p>Page Rank</p> <p>Linear Systems of Equations</p> <p>Constraint Satisfaction</p> <p>Boggle / Scrabble</p> <p>Final Project Work: Analysis and Correctness</p> <p>Find linear systems / constraints in real-life</p> <p>Connect DS &amp; A to another discipline</p> Week 9 <p>Karatsuba / Matrix Multiplication</p> <p>Divide and Conquer</p> <p>Streaming Algorithms</p> <p>Parallel Merge Sort</p> <p>Data Privacy</p> <p>Find algorithms in the news</p> <p>Parallelize a previous algorithm</p> <p>Final Project Work: Analysis and Correctness</p> Week 10 <p>Bonus Topics / Catchup Week</p> <p>Quantum DS &amp; A</p> <p>Recommender Systems</p> <p>Collaborative Filtering</p> <p>Finding Real World Examples: Go Local, Go Deep</p> <p>Final Project Work</p> <p>Synthesizing notes\u00a0</p> Tracks <p> Student who have never taken DSA before will take DSA in this quarter and participate in Changemakers team companies. They may choose either the Java programming language (with examples and support provided by DSA assignments) or any  other programming language where they must provide their own support and collaborate with each other. For example, if you choose Rust, you need to find at least one other classmate who wants to do Rust and check in with  each other. These students will be evaluated by Richard with feedback from Paul. </p> <p> Students who have already taken DSA will be doing an Independent Learning Contract, with a self-designed  curriculum, weekly milestones, and a statement of deliverables. These students will be evaluated by Paul with feedback from Richard, and will be asked to give updates on their progress and share feedback with the class each Thursday morning except the first. </p> Evaluation <p> Depending on which track of the class you are doing, you will be evaluated by a different faculty. If in doubt, please ask either Richard or Paul. <p> <ul> <li>Students in the DSA and Changemakers track will be evaluated by Richard, with feedback from Paul.</li> <li>Students in the Independent Learning Contract track will be evaluated by Paul, with feedback from Richard.</li> </ul> Paul's Feedback Criteria <p> For students in both tracks, Paul will assign *quantity* of credits (totalling 12 or 16 as agreed upon after the first week) based on amount of work, and write a narrative evaluation based on the quality of work and concepts demonstrated. </p> <p>Quantity of Credits</p> <ul> <li>33% from completing weekly DSA assignments, or completing weekly milestones.</li> <li>33% from participating in class activities and GitHub contributions to the class monorepo, especially merging pull requests.</li> <li>33% from final project, which may be your Changemakers' team or individual project, or your Independent Learning Contract.</li> </ul> View Course Stream View Course Analytics View Course Notifications Coming Up View Calendar <ul> <li>Nothing for the next week</li> </ul> <p> </p> START HERE <p>Or click on Modules in menu at left to view list.</p>"},{"location":"FinalProject/","title":"Final Project and Independent Contract","text":"<p>This document describes 1/3 of your credit and evaluation for DSA students, and all of your credit and evaluation if you have taken DSA before and are doing an independent, in-program learning contract with Paul.</p> <p>For DSA students, I'd like to see a progressively realized project demonstrating your data structures and algorithms skills and also your ability to find and develop them in a Real-World Application throughout the quarter.</p> <p>For independent students, I'd like to see the ability to apply your computer science skills to a problem that is personally interesting to you. It may be to make progress on a project that you have previously started. Your goal during this quarter is to show software engineering judgment for time estimation and your circle of competence.</p> <p>That is, it's an attempt to carve out a smaller piece of a possibly bigger project or life goal and make a commitment to another person (a faculty member, and optionally a classmate that you exchange your contract with). It requires knowledge of yourself and your current capabilities, as well as the desire to steer where you want to go.</p>"},{"location":"FinalProject/#deliverables-for-all-projects-dsa-and-independent","title":"Deliverables for All Projects (DSA and Independent)","text":"<p>You can apply the criteria below, or present a case in your proposal for alternative criteria that meets the intent of showing substantial effort for upper division computer science credit.</p> <p>Per team member: * 500 lines of original code, newly written or refactored while maintaining existing functionality, written this quarter * 5 tests showing how to run your code and demonstrating 5 different modes of operation or functionality.   * These can be unit tests written in code, integration tests written as a script, screenrecording videos, screenshots</p> <p>For the whole project: * A three-page or longer report describing   * What you learned   * New functionality or properties of your code   * The technology stack you used and why,   * Strengths of your work   * Challenges you encountered and how you handled them   * Opportunities for growth and future direction</p> <p>You can incorporate some or all of the above sections into your required Evergreen self evaluation.</p> <p>For example: if you have two members of your team, you'll each need to contribute 500 lines of code or code changes.</p>"},{"location":"FinalProject/#credits-and-team","title":"Credits and Team","text":"<p>One-third of your credits and evaluation this quarter will be based on your final project, which will be done as a team that you choose among classmates in both the Data Structures and Algorithms program and the Changemakers business program. Teams may be  solo (one person) or up to 20 people. You will have to do some legwork and talk to your classmates to learn what teams may be forming and how you can contribute!</p> <p>We recommend and will support you in pushing outside your comfort zone. If you normally  prefer to work alone, we suggest finding teammates, and if you normally like to work with  teammates, we suggest going it alone. But no matter what, the teaching staff and your classmates will be here to talk and go through the experience with you.</p>"},{"location":"FinalProject/#progression-through-10-weeks","title":"Progression Through 10 Weeks","text":"<p>While each week we will introduce new concepts, data structures, and algorithms, and  self-contained homework exercises to help you learn, you will be progressively synthesizing these  learnings, adding them to your final project.</p> <p>At the end, you will have the following deliverables to submit to instructors as well as a  portfolio piece that you can display on your Git profiles, your websites and social media, and as a starting point for your work in later quarters (Purpose Driven Web in Winter 2024 and Software Construction in Spring 2024).</p>"},{"location":"FinalProject/#criteria","title":"Criteria","text":"<ul> <li>Use and combine at least four data structures (beyond an array or a linked list) or algorithms.</li> <li>Be compelling for you and your team. It doesn't have to appeal to anyone else but you and your teammates. You'll be working on this problem for 10 weeks, so when you think of the project, you want to feel  a certain eagerness to make progress.</li> <li>Describe your invariant, in both plain English and in math or code. This invariant is true  of your data structures at every step along the way from input to output, and your algorithms  should preserve it.</li> <li>Contains about 5 unit tests that verify your solution works as intended.</li> <li>Contain 500 lines of code that compiles, runs, and passes your tests.</li> <li>Contain at least 100 data items, either real or mocked. </li> </ul>"},{"location":"FinalProject/#real-world-application","title":"Real-World Application","text":"<p>The guiding force and north star that will help align your work and give you direction is your Real-World Application (RWA).</p> <p>Data structures like arrays and binary search trees, and algorithms like heapsort or  finding the shortest path, only exist in the abstract, conceptually clean and simple. When you use them to solve a Real-World Application, you may encounter the following challenges and need to discuss and work with your team on them.</p> <ul> <li>Identifying a Real-World Application of a data structure or algorithm in the first place.</li> <li>Removing unnecessary details and simplifying (abstraction).</li> <li>Modeling the problem with relevant details.</li> <li>Generating mock data or collecting real data.</li> <li>Code that creates data structures based on the data.</li> <li>Algorithms that transform the data in an automated way to a more useful form.</li> <li>Examples (at least three) demonstrating running your code on the data you collected and why the  returned output is expected.</li> <li>Instructions on how to run your code.</li> </ul>"},{"location":"FinalProject/#collecting-real-data","title":"Collecting Real Data","text":"<p>Traditionally, we deal with data in table form. Each table can be called an \"entity\". Think of a spreadsheet. It has a number of columns, also called \"fields\", and a number of rows, which are analogous or \"equal\" items that all have the same fields, though they may have different values.</p> <p>In fact, you may wish to open up a spreadsheet (Excel, or Google Sheets online, or any similar program) and start collecting data here. When you're ready, somewhere around Week 4 or 5, you can export this data as a  CSV (Comma-Separated Values) file, read it into your program, and then \"hydrate\" or \"reinflate\"</p> <p>Real data is preferred to mock data in this class, but they each have their uses.</p> <p>The \"smell\" of real data and its rough surfaces, distribution of digits, and messy incompleteness contribute a compelling beauty and internal consistency to your work that will immediately shine  forth to whoever reads it.</p> <p>You can start collecting data on Day 1 of the class. The best data is gathered a little at a time, rather than gradually all at once. You may only vaguely be aware of what to collect, but that's okay. If you add new columns later on and your early data is missing those columns, you can go back and \"backfill\" them as time permits. In conjunction, you can modify your algorithm to gracefully handle missing columns.</p> <p>Handling missing, incomplete, or invalid data, and also preprocessing or \"cleaning up\" data is a very  common operation in Real-World Applications.</p>"},{"location":"PeriodicTable/","title":"Periodic Table of DSA","text":"Data Structure Name Create Read Update Delete From size n, afterwards... size increases to n+1 size stays the same at <code>n</code> size stays the same at <code>n</code> size decreases to <code>n-1</code> insertAt(i,v) insertLast(v) size() isEmpty() searchFor(v) min() max() replaceAt(i,v) removeAt(i) Arrays O(?) Linked lists Stacks Queues Heaps Binary Search Trees"},{"location":"PeriodicTable/#arrays","title":"Arrays","text":""},{"location":"PeriodicTable/#arrays-insert-at","title":"Arrays Insert At","text":"<p>O(?)</p>"},{"location":"SoftwareSetup/","title":"Software Setup","text":"<p>You will only need to go through this Software Setup once at the beginning of Data Structures &amp; Algorithms. However, if you have never used GitHub and GitPod before, or if you need a refresher, please budget plenty of time to complete these steps. You'll need them to complete Assignment 1 in the first week, as well as all the other assignments.</p> <p>As you read through, be on the lookout for mistakes, discrepancies, bugs, or anything that doesn't work out the way you expect. Congrats, you've found an issue that  you can use to complete Step 9 of the Cloud IDE setup below. </p>"},{"location":"SoftwareSetup/#github","title":"GitHub","text":"<p>You'll need to sign up for a GitHub account.</p>"},{"location":"SoftwareSetup/#1-go-to-github","title":"1. Go to GitHub","text":"<p>In your browser, enter the url https://github.com</p> <p>Click on \"Register\" to create a new account, or \"Login\" if you already have an account.</p> <p>Verify with your phone number.</p>"},{"location":"SoftwareSetup/#2-request-to-be-added-to-class-monorepo","title":"2. Request to be added to class monorepo","text":"<p>Go to https://github.com/TheEvergreenStateCollege/upper-division-cs/issues</p> <p>Click the \"New issue\" green button and create a new issue with the title \"Add  as maintainer\" and with the label <code>admin</code>. Assign it to ten of your classmates. <p>You can paste the following body into a new issue:</p> <pre><code>This issue is part of [SoftwareSetup.md](dsa-23au/SoftwareSetup.md).\nI would like to be a maintainer of our learning organization,\nresponsible for surfacing any problems I can find, helping my classmates,\nand creating a fun and safe learning environment.\nI will do my best to learn how to create pull requests, merge branches,\ngive code reviews, write and refactor Java code in this monorepo,\nand work on resolving issues and pull requests opened by my classmates.\n</code></pre>"},{"location":"SoftwareSetup/#cloud-ide","title":"Cloud IDE","text":"<p>We will be using GitPod, a online integrated development environment (IDE) that can be accessed from any web browser, allowing you to easily work on lab computers or on your home machines.</p>"},{"location":"SoftwareSetup/#1-go-to-gitpod","title":"1. Go to GitPod","text":"<p>In your browser, enter the URL https://gitpod.io</p> <p>This is the first URL you'll enter into a web browser each time you sit down at a computer to work on this class.</p> <p>If you've chosen to download and install Desktop IDEs like VSCode or IntelliJ to your laptop, with the appropriate Gitpod plugins, you can open those IDEs directly.</p> <p>Choose to login via your GitHub account, which you've created or logged into as part of the previous section.</p>"},{"location":"SoftwareSetup/#2-link-your-linkedin-account","title":"2. Link Your LinkedIn Account","text":"<p>There is free plan allowing up to 50 hours per month of use if you create and link your LinkedIn account. You may wish to do this to connect with alumni, recruiters, or professionals in the field or specialty that you are interested in working in.</p> <p></p>"},{"location":"SoftwareSetup/#3-answer-the-survey","title":"3. Answer the Survey","text":"<p>Answer some preliminary questions about our use of Gitpod for this class. You can adjust your answers to suit your preferences, it won't affect your development experience.</p> <p></p>"},{"location":"SoftwareSetup/#4-open-a-workspace","title":"4. Open a Workspace","text":"<p>Since this is probably your first time using GitPod for this class, click on \"New workspace\" and copy and paste the private repo you created above.</p>"},{"location":"SoftwareSetup/#5-open-gitpod-in-your-browser","title":"5. Open GitPod in Your Browser","text":"<p>Choose \"Open in Browser\". This will open up VSCode in your browser.</p> <p></p> <p></p>"},{"location":"SoftwareSetup/#6-enable-write-permissions","title":"6. Enable Write Permissions","text":"<p>Enable permissions in Gitpod's integrations for Github / Bitbucket / Gitlab by navigating to this URL https://gitpod.io/user/integrations</p> <p>Next to the \"GitHub\" integration, click on the three dots and choose \"Manager this on github.com\"</p> <p></p> <p></p> <p></p>"},{"location":"SoftwareSetup/#7-set-your-git-config-email","title":"7. Set your Git Config Email","text":"<p>Run the <code>git-config.sh</code> script you set in the <code>GitHub</code> section above.</p>"},{"location":"SoftwareSetup/#8-make-sure-you-have-tools-in-your-path","title":"8. Make sure you have tools in your $PATH","text":"<pre><code>$ which java\n/opt/graalvm-community-openjdk-20.0.2+9.1/bin/java\n$ which mvn\n/opt/apache-maven-3.9.4/bin/mvn\n</code></pre> <pre><code>source ./scripts/.shrc\n</code></pre>"},{"location":"SoftwareSetup/#9-go-to-your-github-settings","title":"9. Go to your GitHub settings","text":"<p>In your GitHub email settings: https://github.com/settings/emails</p> <p>and copy your private, \"no-reply\" email address that GitHub generated for you, to avoid leaking your real email address to the public.</p> <p>It will look similar to mine, which is <code>148553+learner-long-life@users.noreply.github.com</code></p> <p>Copy this and save it for the next step.</p>"},{"location":"SoftwareSetup/#10-create-a-configuration-script","title":"10. Create a configuration script","text":"<p>You'll run this script the first time you start up GitPod using this repository (below).</p> <p>In GitPod, create a new file in the path <code>/workspace/upper-division-cs/dsa-23au/scripts/git-config.sh</code> which you can do by clicking the file icon with a plus sign show in the screenshot below</p> <p></p> <p></p> <p>Add these contents to the file, being sure to replace your private email address </p> <pre><code>#!/bin/sh\n\n# Enable us to push, through email privacy features\ngit config --global user.email 148553+learner-long-life@users.noreply.github.com\n</code></pre> <p>Don't worry, this is not a real email address, and this is a private repo, so you are not revealing anything unsafe by saving it here.</p>"},{"location":"SoftwareSetup/#11-update-this-document","title":"11. Update this Document","text":"<p>Test that everything works by making a change to these instructions, adding any corrections, insights, jokes, comments, or memes that you think will help future students.</p> <p>If you are looking for a beginner-friendly change to make, check out any open Issues for this GitHub repository.</p> <p>The file is located at</p> <pre><code>./dsa-23au/SoftwareSetup.md\n</code></pre> <p>Right-click the tab in GitPod and choose \"Open Preview\"</p> <p>All documentation in this class is written using Markdown, a simplified formatting language that is meant to be plaintext and human-readable.</p> <p>You can read more about using Markdown here.</p>"},{"location":"SoftwareSetup/#12-add-commit-push","title":"12. Add, Commit, Push","text":"<p>After making your changes, you will perform the <code>version control dance</code> of hackers everywhere.</p> <p>First you will stage your changes for commit. This helps separate changes that are ready and others which you may still be working on. In our case, we want to stage our changes to <code>SoftwareSetup.md</code>, since we want others to receive changes and corrections, but we will ignore our changes to <code>git-config.sh</code>, since it contains a no-reply email address that is specific to just us.</p> <pre><code>git add SoftwareSetup.md\n</code></pre> <p>Next, you will check the status to see that only the files you meant to stage are going to be committed. You will probably see two files to change.</p> <pre><code>git status\n</code></pre> <p>Then you'll commit the file that is staged.</p> <pre><code>git commit\n</code></pre> <p>This will bring up a temporary text editor pane in VSCode where you can type a brief, typically one-sentence message summarizing the changes you made.</p> <pre><code>git push\n</code></pre> <p>// This is also Jon. I enrolled in this class to better my programming and design skills.  // A little bit about, I am a Senior at evergreen going for a Bachelors in Science and looking to get my Cybersecurity Cerftificate. //Im Looking forward to working with everyone this quarter. // One little fun fact about me is that I am currently working on an Unreal Project with my friend over in Las Vegas.</p>"},{"location":"week-01/2023-09-26-ctf-event/","title":"CTF Event","text":"<p>WiCyS strategic partner Amazon will be hosting a jeopardy-style Capture the Flag (CTF). The challenge categories will include web, networking, cryptography, steganography, recon, reverse engineering, and pwn. Participation will be individual, but participants are allowed to collaborate. The CTF will start right after the September 28 webinar finishes and will run for 24 hours. All levels of technical skills are welcome. Prizes will be given to the winners! Sign up below to get access to the platform. The CTF will run from September 28, 11:00 am PST to September 29, 11:00 am PST.</p> <p>Sign up for the CTF here: https://amsec_wicys_ctf_competition.splashthat.com/</p>"},{"location":"week-01/2023-09-26/","title":"Week 1 - Day 1","text":""},{"location":"week-01/2023-09-26/#26-september-2023","title":"26 September 2023","text":""},{"location":"week-01/2023-09-26/#handouts","title":"Handouts","text":"<p>On paper, because technology may not work. Class syllabus. Short survey of students and their background, GitHub username, goals for learning DSA.</p>"},{"location":"week-01/2023-09-26/#faculty-introductions","title":"Faculty Introductions","text":"<p>Richard Weiss. weissr@evergreen.edu</p> <p>Paul Pham. paul.pham@evergreen.edu</p>"},{"location":"week-01/2023-09-26/#class-schedule","title":"Class Schedule","text":"<p>For the first week, and for rest of quarter.</p>"},{"location":"week-01/2023-09-26/#two-tracks","title":"Two Tracks","text":"<p>12 open slots for Changemakers Lab, to participate directly in Team Companies with a responsibility of Tuesday - Thursday afternoon sessions, to come up with their own learning goals and homework, and to benefit from the revolutionary ChangeMakers approach.</p> <p>Returning DSA Students get preference, open to everyone.</p> <p>Remaining students will get more time for pair programming, a curated selection of homeworks designed to teach and test your programming skills for future technical jobs, and a chance to deep dive on computer science.</p> <p>You can serve as a consultant for one of the ChangeMakers team companies, applying your knowledge from the homeworks to a real-world problem found by you or your teammates, and build a piece for your portfolio or website.</p>"},{"location":"week-01/2023-09-26/#assignment-1-due-friday-at-3pm-on-github","title":"Assignment 1 Due Friday, at 3pm on GitHub","text":"<ul> <li>Set up your GitPod development environment.</li> <li>Become familiar with the class monorepo.</li> <li>Become familiar with Markdown.</li> <li> <p>Participate in class knowledge co-creation through editing Markdown files in GitHub.</p> </li> <li> <p>Begin collecting a dataset in a spreadsheet (Google Sheets, Excel, Numbers)   based on your interests. Requirements</p> </li> <li> <p>Must be a real application / question from your life that has your interest: walking around campus or Olympia, or your daily life, or your programming life </p> </li> <li>Must have a new addition every one or two days, ideally several times per day </li> <li>Examples:<ul> <li>your exercise (running time), tracking any kind of personal habit, or those of your family and friends </li> </ul> </li> </ul>"},{"location":"week-01/2023-09-26/#datasets","title":"Datasets","text":"<p>https://docs.google.com/spreadsheets/d/1fEIboGic-SDntyGqop_vcySgVbKA11rs8wzzI_6BKEA/edit?usp=sharing</p>"},{"location":"week-01/2023-09-28-Co-Creation/","title":"Knowledge Co-Creation","text":"<p>Thursday, 28 September 2023</p>"},{"location":"week-01/2023-09-28-Co-Creation/#add-your-five-sentences-and-your-pair-programing-partners-5-sentences-below","title":"Add your five sentences and your pair programing partner's 5 sentences below","text":"<p>On Tuesday, we discussed fundamental algorithm principle. 'Algorithms take state where invariant is true, then outputs invariant as true.' On Thursday, we uploaded a dataset to upper-division-cs/dsa-23au/java-dsa/arrays-link/src/main/GhostTowns.CSV Need to push/pull gitpod. We discussed possible project ideas.what are we going to learn as a team -- faulkdf-dawsonwhi -- Paul is cryptogoth.</p> <p>we need more practice with git and gitpod and github.</p> <p>SSH keys are confusing and I just want to use my VS code not GitPods'.</p> <p>we are lost but so is everyone else so its okay.</p> <p>I still don't know what to make a list of.</p> <p>We learned that data structures are found commonly in everday life.</p> <p>They are used to organize data.</p> <p>Everyone has their own way of setting things up.</p> <p>Algorithms are processes that take an input state and put out an output state.</p> <p>-- Stella Parker --  I'm excited for this quarter. I personally haven't applied anything from CML to DSA. Being incentivized by credits to talk to the nearest person is something? Either way, I am happy to be here. Thank you.</p> <p>-- Tor-Dev-Paul-Thal --</p> <p>They will always have an invariant, which is a known stating state. 1. For the first week, I have and still am learning how to navigate github and gitpod.-Torsten 2. Familiarization with GIT is helpful for the first two days of class to reduce the confusion one experiences. 3. Working with other people helps solve issues better versus working alone, Especially for new people. It is much more fun to code with others, solo is made for sleepless nights. 4. A refresher online course before class on Java would be beneficial. 5. Collaboration is much more rewarding in person than remotely. what are we going to learn as a team</p> <p>Change makers lab is from 1pm -5pm  Is this classs monday as well? Yes this class is Mnday Tuesday Thursday Taking this Course has already Changed my life ! I was choosing to work a job from 8am- 4pm runing netwrok data abling for $26 an hour but chose this class instead I am very very greatful</p> <p>Readjusting work to fit around this class was wise. Learning how to work Gitpod/Github is hard. I need to get blue light glasses to protect my eyes. Bringing water is a great idea so I can focus. I consume caffeine in order to stay awake, but it would be better to drink Matcha than Coffee.</p> <p>I took the Changemaker Lab in Fall 2022 and I learned lots of leaderships skills and workshopping skills. I love Destiny 2 and Sonic the Hedgehog. I cant wait to buy my new GPU so I can do more in programming and designs/modeling. I am excited to graduate this year with BS and get my cybersecurity. I am also excited to further my skills at game development.</p> <p>////FOR OCT 5 assignment This past week, I had to brush up on my programming and psuedocode skills that we learned in CSF. I have grown pretty comfortable with arrays and linked lists. My syntax skills have gotten better as I have been using Java API (I urge you to use that as a tool). I have also been practicing call function because that is a great skill to learn with arrays and linked lists. Also ALWAYS PUT COMMENTS IN YOUR CODE!!!</p> <p>we need more practice with git and gitpod and github.</p> <p>SSH keys are confusing and I just want to use my VS code not GitPods'.</p> <p>we are lost but so is everyone else so its okay.</p> <p>I still don't know what to make a list of.</p> <p>======= Robinson - Nguyen - Deanon - Hutchson </p> <p>dawsonwhi-faulkdf Sometimes there is confusion, and teammates having a different viewpoint corrects for missing information in conversation.</p> <p>/// faulkdf \\\\ This class so far is incredbly chaotic. I don't belive that I have ever taken a class here at Evergreen that is this level of \"all over the place.\" Code, and coding has never been my strong suit, but having to do a fair amount of it has been a good refresher. \\ Many times, I really feel as if I am totall lost in class, however I'm pretty sure that theres a fair amount of us that feel the same.  Skills are improving on how to do everthing in a co-created repository, I still worry that I am often doing something wrong. \\\\ end ///</p> <p>======= We learned that data structures are found commonly in everday life.</p> <p>They are used to organize data.</p> <p>Everyone has their own way of setting things up.</p> <p>Algorithms are processes that take an input state and put out an output state.</p> <p>They will always have an invariant, which is a known stating state.  Readjusting work to fit around this class was wise. Learning how to work Gitpod/Github is hard. I need to get blue light glasses to protect my eyes. Bringing water is a great idea so I can focus. I consume caffeine in order to stay awake, but it would be better to drink Matcha than Coffee.</p> <p>=========== Hyre-Elson-Branch Learning to use Github is confusing, will take time and effort to learn. Caffiene is my best friend. There will usually be an invarient of some kind. Nobody knows what we are doing, but it can be fun to pair with others to learn. Being lost is oddly helping me learn more, if that makes sense.</p> <p>Jonathan Rodriguez - Co-Creation 2 For those who would like to know, a hash table is a data structure that maps keys to values for highly efficient lookup. I like to split hash code into a 3 step process (Compute, Map, Avoid Collisions). There are many ways to deal hash code collisions such as linked lists, search trees, and linear probing. A stack is a fundamental data structure in computer science. Think of it as a stack of plates where you can only remove or add plates to the top of the stack.  main</p>"},{"location":"week-01/2023-09-28/","title":"Week 1 - Day 2","text":"<p>Thursday, 2023 Sep 26</p> <p>Edit this Page on GitHub</p> <p>CTF Event announcement at 11am</p>"},{"location":"week-01/2023-09-28/#arrays-and-links-homework","title":"Arrays and Links Homework","text":"<p>(Due by next Wednesday, 3pm) (45 minutes in class)</p> <ul> <li>With a pair programming partner, in GitPod or your favorite development environment</li> <li>Create a branch containing your usernames and <code>array-links</code> somewhere.</li> <li>Change to <code>dsa-23au/java-dsa/array-links/src/main/resources</code> </li> <li>Export your dataset spreadsheet from above to a CSV file. Add this to the monorepo in the directory above.</li> <li>Divide up in the class the methods of the <code>java.util.List</code> interface.</li> <li>Implement your methods with a partner in interface.</li> <li>Write some unit tests in <code>dsa-23au/java-dsa/array-links/src/test</code>, commit and push.</li> <li>Compile it into a JAR with <code>mvn package</code></li> <li>Run unit tests with <code>mvn test</code></li> <li>Create a pull-request from your branch and request a review from someone else in the class who hasn't already been requested.</li> <li>Review the PR that one of your class mates has requested that you do.</li> <li>Both reviewer and reviewee exchange feedback until it is ready to marge.</li> <li>Merge the PR and close it.</li> </ul>"},{"location":"week-01/2023-09-28/#housekeeping","title":"Housekeeping","text":"<p>(15 minutes)</p> <ul> <li>Reading assignment.</li> <li>Head TA: Winston Shine, other TAs / tutors to follow</li> <li>Where else to get help: open a GitHub issue, email / canvas DM any of your pair programming partners, email / canvas DM me or Richard, ChatGPT (demo), google search</li> <li>Fill out Survey of Best Times for Lab Help</li> <li>Final Projects </li> <li>Ask students to accept their GitHub invites to be maintainers of the monorepos</li> <li>Create a pull request and merge any remaining differences from their private forked repos to monorepo</li> <li>Delete their private forked repo.</li> <li>Check canvas sections</li> <li>Pair with someone different from last time.</li> </ul>"},{"location":"week-01/2023-09-28/#practice-markdown-co-creation","title":"Practice Markdown Co-Creation","text":"<p>(20 minutes to get started)</p> <ul> <li>Create a branch for your programming pair called <code>&lt;username1&gt;-&lt;username2&gt;</code></li> <li>All the new files below, you'll save in the <code>dsa-23au/notes/docs/chapter-01</code> directory</li> <li>Write five sentences about Changemakers and how to apply it to Data Structures and Algorithms</li> <li>Suggestion: How can we apply or how have you been practicing these Changemaker concepts in the context of DSA?</li> <li>Make one correction that you remember to the SoftwareSetup</li> <li>Suggestion: Check [GitHub Issues]</li> <li>While you have not merged all branches into a single <code>2023-09-26-Changemakers.md</code> file on <code>main</code> branch</li> <li>Create a PR for your branch, and ask one other classmate to review it who is only reviewing at most one other PR.</li> <li>At most two other classmates will request that you review their PRs. Do so by<ul> <li>Creating a new branch <code>&lt;username1&gt;-&lt;username2&gt;-&lt;username3&gt;-&lt;username4&gt;</code></li> <li>Reviewers and reviewees converse back and forth using GitHub discussion threads and in-person.</li> <li>Reviewee can make changes as requested, or reviewer can make them directly and commit to branch.</li> <li>When both parties agree change is ready, they merge the two branches to the new four-person branch <code>&lt;username1&gt;-&lt;username2&gt;-&lt;username3&gt;-&lt;username4&gt;</code></li> </ul> </li> <li>Repeat for 8-person and 16-person versions until the entire class's contributions have been merged into <code>main</code>.</li> </ul>"},{"location":"week-01/2023-09-28/#fundamental-principle-of-dsa","title":"Fundamental Principle of DSA","text":"<p>(10 minutes)</p> <p>Let's keep working on an expression of our Fundamental Principle of Data Structures &amp; Algorithms. We want to apply it to a simple example:</p> <ul> <li>A sorted list of integers</li> <li>Reversing a linked list</li> </ul>"},{"location":"week-01/2023-09-28/#add-to-datasets","title":"Add to Datasets","text":"<p>(20 minutes)</p> <ul> <li>Start a dataset based on something meaningful to you and record it in a spreadsheet.</li> <li>Add a link to your dataset below.</li> <li>Collaborate with your partners to add more rows until you have about 20.</li> <li></li> </ul>"},{"location":"week-01/2023-09-28/#pair-programming","title":"Pair Programming","text":"<p>(20 minutes)</p> <ul> <li>Distribute printed out pages from this reading On Pair Programming.</li> <li>Ask students in pairs to read their pages and summarize 5 important points, and write it in a new MD file   named <code>MERGE-ME-2023-09-28-&lt;username1&gt;-&lt;username2&gt;</code></li> <li></li> </ul>"},{"location":"week-01/2023-09-28/#class-summary","title":"Class Summary","text":""},{"location":"week-01/asymptotic/","title":"Asymptotic Analysis","text":"<p>Infinity is a mysterious entity in mathematics. In addition to having the property of being larger than any real number, it helps define behaviors at a limit, for example, series of numbers that proceed in an algorithmic way:</p> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>there is usually a formula to proceed from </p>"},{"location":"week-01/chapter_1/","title":"Week 01","text":"<p>Autumn 2023</p>"},{"location":"week-01/chapter_1/#assignments","title":"Assignments","text":"Main Link Canvas Link Reading Assignment 1 Canvas Link Software Setup Canvas Link"},{"location":"week-01/chapter_1/#background-resources","title":"Background Resources","text":"<p>A refresher course in Java. If you have never taken Computer Science Foundations (CSF), the lower division program at Evergreen, or any programming course before, use this Codecademy course as needed.</p> <ul> <li> <p>Java Course on Codecademy</p> </li> <li> <p>Learn Git Branching, an interactive, online, visual tutorial for learning Git Branches</p> </li> </ul>"},{"location":"week-01/chapter_1/#the-duality-of-time-and-space","title":"The Duality of Time and Space","text":"<p>Exercise: * Pick a duality from another science, area of knowledge, popular culture, your favorite movies and books. Describe how the duals complement and define each other, what role balance plays, and how you can tradeoff one dual for another.</p>"},{"location":"week-02/2023-10-02/","title":"Week 2 - Day 3","text":"<p>2 October 2023 - Monday</p>"},{"location":"week-02/2023-10-02/#announce-tech-incubator","title":"Announce Tech Incubator","text":"<p>https://github.com/TheEvergreenStateCollege/upper-division-cs/issues/27</p>"},{"location":"week-02/2023-10-02/#java-resources","title":"Java Resources","text":"<p>A Java refresher course https://www.codecademy.com/learn/learn-java</p> <p>The official Java Development Kit Reference and API Documentation https://docs.oracle.com/en/java/javase/20/docs/api/index.html</p>"},{"location":"week-02/2023-10-02/#crud-guidelines-for-data-type-interfaces","title":"CRUD: Guidelines for Data Type Interfaces","text":"<p>Every data structure that we study will have most or all of these methods in some form. These are also the basic operations in databases.</p> <p>Create: (sometimes also insert, or insertAt with an index) Read: (somtimes called search or find or getAt with an index) Update: (sometimes called updateAt with an index) Delete: (sometimes called remove, or extract)</p> <p>These will be useful later when we steady Application Programming Interfaces (APIs) and the REST paradigm (Representational State Transfer)</p> <p>Other useful methods:</p> <p>Min Max</p>"},{"location":"week-02/2023-10-02/#array-links-and-unit-tests","title":"array-links and Unit Tests","text":"<p>Work together in pairs.</p> <p>Complete all the methods of <code>List</code> interface in ArrayWrapper, except for <code>iterator</code>.</p> <p>Learn about <code>Nodes</code> and links, complete all the methods of <code>List</code> interface for <code>LinkedList</code>, except for <code>iterator</code></p> <p>Spin up GitPod workspace from scratch and test Maven compilation.</p> <p>There is currently no linting, autocomplete, or autosuggest in our instance of VSCode, so you will have to learn more about Java and be your own linter for now.</p> <p>Use the following rule of thumb:</p> <ul> <li>Read through your code line-by-line. If you and your teammates believe it has an 80% chance of compiling successfully, you can compile it with <code>mvn package</code></li> <li>Otherwise, continue looking through online documentation, reading your book, or asking AI chats to modify your code and build confidence.</li> </ul>"},{"location":"week-02/2023-10-02/#hacktoberfest","title":"Hacktoberfest","text":"<p>A good way to learn about open source, hacker culture, using version control like GitHub with pull requests, and communicating with other programmers. We'll be participating as a class during the month of October to reinforce the skills we are already learning, with also the chance to win some prizes and have trees planted in the world.</p> <p>https://hacktoberfest.com/</p> <p>You can optionally substitute work on your four pull requests for any of the weekly Java programming assignments during October.</p> <p>You can choose an open source project in the language you are learning (Java for most students) that you are already a user of, or that you find interesting and would like to try. Here are some links you might find helpful</p> <p>https://github.com/topics/hacktoberfest https://up-for-grabs.net/#/filters?tags=java https://github.com/topics/hacktoberfest?l=java</p> <p>https://github.com/TheAlgorithms/Java (You can search through the algorithms already implemented, and find a new one in one of your textbooks that you can add to the shared online collection.)</p>"},{"location":"week-02/2023-10-03/","title":"Week 2 - Day 4","text":"<p>3 October 2023 - Tuesday</p>"},{"location":"week-02/2023-10-03/#morning-session","title":"Morning Session","text":""},{"location":"week-02/2023-10-03/#review-fundamentals-and-how-to-implement-them-in-java","title":"Review Fundamentals, and How to Implement Them in Java","text":"<ul> <li>Invariants</li> <li>Termination Condition</li> <li>Initial state</li> <li>??</li> </ul> <p>Try applying these to the CRUD operations for Lists, first in English, then in Java.</p>"},{"location":"week-02/2023-10-03/#analyzing-and-comparing-arrays-and-linkedlist","title":"Analyzing and Comparing Arrays and LinkedList","text":"<p>We will run both <code>ArrayWrapper</code> and <code>LinkedList</code> on your datasets</p>"},{"location":"week-02/2023-10-03/#afternoon-session","title":"Afternoon Session","text":""},{"location":"week-02/2023-10-03/#resource-usage-and-efficiency","title":"Resource Usage and Efficiency","text":"<p>We focus mainly on two to start with:</p> <p>Computational (CPU) Time</p> <p>Computational Space (Memory)</p> <p>Time-Space Duality</p> <p>Others: * Network bandwidth</p>"},{"location":"week-02/2023-10-03/#asymptotic-analysis","title":"Asymptotic Analysis","text":"<p>Algorithm analysis, pioneered by Donald Knuth, in The Art of Computer Programming.</p> <p>How these resource usages grow with input size.</p> <p>Hierarchy from most efficient to least efficient </p> <ul> <li>Constant</li> <li>Logarithmic</li> <li>Polynomial</li> <li>Linear</li> <li>Quadratic</li> <li>Cubic</li> <li>...</li> <li>Quasi-polynomial or Sub-Exponential</li> <li>Exponential</li> </ul>"},{"location":"week-02/2023-10-05/","title":"Week 2 - Day 5","text":"<p>3 October 2023 - Thursday</p>"},{"location":"week-02/2023-10-05/#morning-session","title":"Morning Session","text":"<ul> <li>Ask for a note taker.</li> <li>Take notes on who people are, what they say, what they are working on, what they are blocked by or would like help on.</li> <li> <p>Group us into major activities, and the times each one starts.</p> </li> <li> <p>Arrays and Linked List</p> </li> <li>When to use one or the other?</li> <li>insert operation (graph constant time versus linear time)</li> <li>remove operation</li> <li> <p>getAt</p> </li> <li> <p>Hashtables (HashMap, Dictionary)</p> </li> <li>Hash function on an array</li> <li>Fixed (deterministic) but evenly distributed</li> <li>A perfect hashing scheme</li> <li> <p>Collision</p> </li> <li> <p>Composing Data Structures</p> </li> <li>Queue from a Linked List</li> <li>Stack from an Array</li> <li> <p>Hashtable</p> </li> <li> <p>Our Goal is</p> </li> <li>view our issues and pull requests (how do we connect them?)</li> <li>to Give Code Reviews and have conversations on threads</li> <li>Merge, Commit, and Push</li> <li>Give our Teammates the Opportunity to Practice</li> <li>Close and Delete Private Forks / Unused Workspaces</li> <li>To Open a Fresh GitPod and be able to run Maven, Commit, and Push</li> <li>Split up into groups to parallelize</li> </ul> <p>What are the CRUD operations for stacks and queues? What are the </p>"},{"location":"week-02/2023-10-05/#notes-and-in-class-transcript","title":"Notes and In-Class Transcript","text":"<p>From @whereismyprozac</p> <p>DSA 10/5/23 UPPER-DIVISION-CS/PULL/49/FILES Dsa-23/notes ASPEN ARRIVED AND DELIVED A DISCORD GROUP https://discord.gg/z9282PAxLinks to an external site. Arrays/Link lists/ when to use them- Paul used a dry-erase marker to demonstrate an array and link lists. He declined offers from the class for a real writing utensil.  Dom was appointed to the front to talk about arrays and link lists. Quin and Joe chimed in. Paul Swisher added Dom to the repo. (Duc leans against the concrete pillar, ridiculously placed in the middle of the room.) Dominic? raised his hand and galloped to the front of the room. (There are now 6 people standing up) Joe Grainvile JWGrainville  In terms of operators that are faster append is faster of you don\u2019t need to allocate appending is easier for arrays because u put it at the next spot Dom sever abysssayl remark Difference between the 2 arrays are fixed can be indexed anywhere in array When you run out of room in an array you need to create a new one Stella Parker whereismyprozac ArrayWrapper needs a new file \u2013 it is being referenced Reimplementing arraylist Duc Win akinass  Create was faster for an array in some cases.  Mellisa Nevalla Duc Win akinass --- What is the ArrayWrapper? Quin It\u2019s our name for arraywrapper. Torston Speeler Evergreentor Dominic list would be call a vector in c++ Size, isEmpty, toArray Dom  Is Size faster on array because it\u2019s already indexed? Davi Winston Westdav toarray might be the fastest.  Pull Req/ Other Stuff-</p>"},{"location":"week-02/2023-10-05/#afternoon-session","title":"Afternoon Session","text":"<ul> <li>The three-lines Yes-And Code-Improv Exercise</li> <li>Each person adds only three lines, including comments to a file</li> <li>They create a pull request describing what they think needs to be done next, and what the overall goal is.</li> <li>They assign as reviewer another person, who repeats this exercise</li> <li>Can be used to recreate a previous project e.g. \"array-links-2\" to work on from scratch</li> <li>Gives all team members a chance to write different parts of the code</li> </ul> <p>NOTES 10/09/23 RICHARD- we are starting projects and want to do assignments on the module  Paul - Modules , feedback, Credits, Progress on weekly Modules,Join the DISCORD SERVER Stello- If you get errors in your terminal  Paul- Resource Usage &amp; Data Analysis \"Which Data structure is better? Johhnathan Methods of Data Structures - Remove ,Get, Add, Contains, Interator, Size, \"Java.util.list\",Clear, ToArray, isEmpty Usages for Data Structures are for ... GPU time &amp; Memory , Network Bandwidth- Donald Kenuth Killa, Mega, Giga, Terra, Peta  - You have a function and all these calc below it , it has to ignore the functions below Scaling : Quantum computing , Mores Law, How much Space do we need, Ongaws Law Upper Bounding (big O) Big Omgega , Linear Functions , Constant Time 0(1)</p>"},{"location":"week-02/Co-Creation-02/","title":"Co-Creation Week 2","text":"<p>Add your sentences below here. Some notes about Reading Wk 2(Hiraeth):</p> <p>1)It is okay and normal to stutter during an interview. 2)Any Hash Map can have a collision, and there are many ways of solving it. 3)Listening is the first step to solving a problem. 4)Data structures can either be linked or continuous. 5)The dictionary data type gives access to data items.</p> <p>Instructions here. whereismyprozac Cracking the Coding Interview (McDowell) \u2022   I think, for me personally I\u2019m somewhere in the middle of page 31. The market right now looks really bleak and it seems like you need to be related to someone already working at the company to actually get noticed. \u2022   Fundamental data structures, such as arrays, linked lists, stacks, and queues, serve as the backbone for numerous algorithms and operations. \u2022   Understanding hash table collisions, wherein multiple keys map to the same index, is pivotal for optimizing hash table performance. The Algorithm Design Manual (Skiena, 3rd edition) \u2022   Contiguous arrays, while providing O(1) access, have limitations when resizing. \u2022   Linked lists cater to dynamic data storage requirements, offering efficient insertions and deletions at the expense of O(n) random access. \u2022   Stacks, with their LIFO nature, and queues, with their FIFO characteristic, are quintessential data structures for specific problem-solving paradigms. \u2022   Hash maps or dictionaries facilitate rapid key-value look-ups, with efficiency hinging on a robust hash function and effective collision handling.</p>"},{"location":"week-02/Readings-02/","title":"Week 02 Readings","text":""},{"location":"week-02/Readings-02/#cracking-the-coding-interview-mcdowell-the-green-book","title":"Cracking the Coding Interview (McDowell), the green book","text":"<ul> <li>Pages 30-31</li> <li> <p>Long-term Roadmap</p> </li> <li> <p>Pages 62-64</p> </li> <li> <p>Flow-chart, strategies</p> </li> <li> <p>Chapters 1-3</p> </li> <li> <p>Pages 88-99, Arrays, Linked Lists, Stacks, Queues</p> </li> <li> <p>Hash Table Collisions</p> </li> <li>p. 636</li> </ul>"},{"location":"week-02/Readings-02/#the-algorithm-design-manual-skiena-the-red-book","title":"The Algorithm Design Manual (Skiena), the red book","text":"<ul> <li>Chapter 3 up to 3.3</li> <li>Contiguous arrays, linked lists, stacks, queues, hash maps (dictionaries)</li> </ul>"},{"location":"week-02/Readings-02/#data-structures-and-algorithm-analysis-in-java-weiss-the-red-and-white-book","title":"Data Structures and Algorithm Analysis in Java (Weiss), the red and white book","text":"<p>For DSA students doing Java.</p> <ul> <li>Sections 3.5 to 3.7</li> <li>LinkedList implementation, Stack ADT, Queue ADT</li> <li>Sections 5.1 to 5.7</li> <li>Hashing</li> </ul>"},{"location":"week-02/Week02/","title":"Week 02","text":"<p>Autumn 2023</p>"},{"location":"week-02/Week02/#assignments","title":"Assignments","text":"Main Link Canvas Link Reading Assignment 2 Canvas Link Knowledge Co-Creation 2 Canvas Link Java Assignment 2: Links-Stacks-Queues Canvas Link"},{"location":"week-02/Week02/#background-resources","title":"Background Resources","text":"<ul> <li>Real World Applications of Data Structures from Log2Base2</li> <li>Inserting an Element into an Array from Log2Base2</li> </ul>"},{"location":"week-03/2023-10-09/","title":"Week 3 - Day 6","text":"<p>9 October 2023</p>"},{"location":"week-03/2023-10-09/#morning-session","title":"Morning Session","text":"<ul> <li>Pick a note taker from Zoom.</li> <li>A note about merges and resolving conflicts: don't regress / remove useful code by accident</li> <li>https://github.com/TheEvergreenStateCollege/upper-division-cs/commit/350cd9010805375df440355d5dbd040bc7ef3729#diff-dadd3662a440f83c19273fd8b4a9d15147a67949a7c4eb7eb40993b04ff0a9cb</li> <li>compile and run tests, </li> </ul>"},{"location":"week-03/2023-10-09/#first-hour","title":"First Hour","text":"<ul> <li>How to answer a question like: which operations are faster on arrays versus linked list?</li> <li>Resource usage</li> <li>Algorithmic Analysis</li> <li>Asymptotic Notation, Donald Knuth</li> <li>Definition, graphs</li> <li>Vocabulary</li> </ul>"},{"location":"week-03/2023-10-09/#second-hour","title":"Second Hour","text":"<ul> <li>Software Leadership</li> <li>Knowing Who is working on what</li> <li>Gathering a list of tasks</li> <li>Determining an order</li> <li>Picking drivers and teams to come up and type.</li> </ul>"},{"location":"week-03/2023-10-09/#afternoon-session","title":"Afternoon Session","text":"<p>Cracking the Coding Interview</p>"},{"location":"week-03/2023-10-10/","title":"Week 3","text":"<p>10 October 2023</p>"},{"location":"week-03/2023-10-10/#course-notes","title":"Course Notes","text":"<p>Trinity please type here for the first hour: A computational resources: 1)Memory(Space) 2)Time</p> <p>Many Algorithms will use different scales depending on what is more efficient.</p> <p>Question that was asked in Zoom (Jonah Eadie): Is it also because those statistics will vary across different systems? Where a metric like algorithmic complexity is agnostic to the underlying hardware</p> <p>Hardware is constantly updating, for example processors, and there may be changes... but the overall learning of algorithms is the same. It is a constant. Or will also imporve at a constant rate.</p> <p>Orders of Growth (Hiearchy of Functions) that is more efficient than Linear, is called ______ (Too Quiet to Hear this Portion, feel free to fill in the blanks :) ) If one of your algorithms run at an extreme during a function, that usually isn't good. You want steady change, aka aim for the middle, or the constant. Constant time takes the same amount of time, no matter how many objects. Doesn't scale with the amount of data.</p> <p>dxxyoungblood (Feel free to correct, couldn't quite hear): Am I thinking about it backwards? Thinking that Exponential functions are more efficient, but Quinn (aqqmin) clarified getting it closer to the constant time is better. In short, lower is better. Constant time is not dependent on the amount of nodes or data. Simplified explaination of Constant: Having the same running time no matter how big the input grows.  If resource use, we want constant. If more data, modest increase, use exponential.</p>"},{"location":"week-03/2023-10-10/#end-of-first-hour","title":"End Of First Hour","text":"<p>Class is on discord so each individual classmate can share their screens with others. Beginning with size() method for LinkedListWrapper, create a private int called currentSize Devin is sharing screen. Devin, Alena, and Torston add the line <p>List.currentSize;</p> <p>into the size() method. toArray and isEmpty(?) are also updated. Nathanmcl (discord name) begins sharing his screen.  (10:40) Changes are pushed to monorepo. List.currentSize(); is changed to return this.currentSize; and the line return 0; is removed mvn is run, build has some syntax and logic errors remove method for ArrayWrapper is discussed, errors at line 78 ArrayWrapper is commented out for the moment in order to focus on LinkedLIstWrapper. contains() method is examined (lines 32-37), line 35 is modified to change size to currentsize into for loop Paul reiterates the need to get rid of unneccesary branches after they are merged (2:02) isEmpty in LLW added to</p> <p>return currentSize == 0;</p> <p>contains method is examined. Class is asked about node class/member variables. We don't want to have to keep track of the head and tail all of the time.</p> <p>private Node tail;</p> <p>added by Nathan to LLW.  Node objects must be declared for LinkedListWrapper functionality. Nodes (head/tail) can be assigned to \"current\" node ChatGPT is used to help explain the details of implementing nodes. Class is reminded to be nice to the AI (Roko's basilisk) A line for a current node is added to LLW. With the \"contains\" method, the current node can be assigned to the head variable to begin parsing through LLW (2:31) changes are merged, Torston begins sharing screen. Node class is to be worked on, contains is still to be worked on as well. ChatGPT is asked how to best implement. A while loop is added to the method. The loop checks the current node, if the node contains the disered object, then true is returned, otherwise current = next Class break into groups.</p>"},{"location":"week-03/2023-10-12/","title":"Week 3 - Day 8","text":"<p>12 October 2023 - Thursday</p>"},{"location":"week-03/2023-10-12/#morning-session","title":"Morning Session","text":""},{"location":"week-03/2023-10-12/#first-hour","title":"First Hour","text":"<p>All our various activities are to enable you: * To be able to implement at least 4 data structures and algorithms from scratch that pass unit tests in a pair program. * To model a problem + dataset of our choosing (ChangeMakers team project, DSA dataset, independent learning) with data structures and algorithms   * and implement it in a language of your choosing, as part of a team or alone * To be able to write a one-page essay about our design (modeling data) and our implementation (our code) * To be able to sit in a 30 minute interview answering questions about your essay, project, homework solutions, and code contributions   * in Week 5 and Week 10</p> <p>In groups: * Continue working on LinkedList and Stacks from Tuesday * Commit code to pass unit tests</p> <p>Using a Profiler Using a Debugger</p> <p>Hash Map * Collision Strategies   * linear chaining   * probing   * other ideas?</p>"},{"location":"week-03/2023-10-12/#second-hour","title":"Second Hour","text":"<p>Forest Walk (Binary) Heaps</p> <ul> <li> <p>Paper handouts</p> </li> <li> <p>Examples</p> </li> <li>Hospital triage</li> <li>Priority mail delivery</li> <li>Packet routing with different Quality-of-Service customers</li> <li>Promotions within a company or an army</li> <li>The Heap Property (Invariant)</li> <li>The parent key is less than either child keys</li> <li>A node at index i has children at 2i and 2i+1</li> <li>and a parent at floor(i/2)</li> </ul>"},{"location":"week-03/2023-10-12/#assignments-and-projects-reminder","title":"Assignments and Projects Reminder","text":"<ul> <li>Final Project / Credit Expectations</li> <li>Week 3 Project Updates</li> <li>Reading assignment for Week 4</li> </ul>"},{"location":"week-03/2023-10-12/#afternoon-session","title":"Afternoon Session","text":""},{"location":"week-03/2023-10-12/#first-hour_1","title":"First Hour","text":"<p>Goal: Divide up into teams and implement the following methods. The internal representation for each data structure is an array.</p> <ul> <li>HeapWrapper <li>instance member variable of type Object called _array;</li> <li>insert (key)</li> <li>key &lt;-- deleteMin</li> <li>key &lt;-- getMin</li> <li>bool &lt;-- search / contains (key)</li> <li>bool &lt;-- update (key)</li> <li>int &lt;-- size()</li> <li>HashMapWrapper <li>instance member variable of type Object called _array</li> <li>choose one of the collision strategies discussed in the morning</li> <li>put (key, value)</li> <li>value &lt;-- get (key)</li> <li>int &lt;-- size()</li> <p>Classify each of the methods above as C,R,U, or D.</p>"},{"location":"week-03/2023-10-12/#three-line-code-improv","title":"Three-Line Code Improv","text":"<p>Use the Three-Line Code Improv technique from last time. * The teams choose a Discord voice channel room (Study Room 1, 2, or 3) * Each team member takes turns driving, with the rest of the team helping them to navigate * The driver starts their gitpod workspace and shares that tab with Discord screenshare * The driver makes sure his local repo is clean and checks out his main branch. * The driver pulls any changes from last time on main. * The driver checks out and creates a new branch just for today, usually called  where    *  is their github username   *  is the  * The team discusses a plan or vision for which method to focus on next * The team discusses three lines which are needed or can help move in the direction of their goal,   * and can be added while still compiling (do not for any reason break the build)   * <code>mvn package</code> should complete without errors before continuing. * The team directs the driver to write those three lines. * The team directs the driver to commit and push those lines to GitHub (the remote called \"origin\")   * with help for composing an descriptive commit mesage. * The team directs the driver to create a pull request.   * another team member reviews the pull request, merges it to main, and deletes the branch"},{"location":"week-03/2023-10-12/#second-hour_1","title":"Second Hour","text":"<p>[30 minutes] Periodic Table of DSA * Continue updating your table of operations from last time (the Periodic Table, or \"Bingo Card\")   * Add your changes directly here   * Beginning updating this markdown file: </p> <p>[30 minutes] Data Modeling Exercise (to help with your final project)</p> <ul> <li>You are charged with running the DMV. <code>n</code> Drivers come in and stand in line and want to conduct two main appointment types:<ul> <li>Renew or register their driver's license by their ID number or by their name.</li> <li>Renew or register their vehicle's tag by their license plate number or by their name.</li> </ul> </li> <li>Each appointment takes the same amount of time.</li> <li>There are <code>m</code> clerks behind counters to serve the drivers.</li> <li>Drivers coming in are of two types,<ul> <li>The ones who made an appointment at home; they get priority</li> <li>The ones who just show up without an appointment</li> </ul> </li> <li>Drivers are served by who has been waiting the longest</li> </ul> <p>First sketch out a solution using a box diagram and up to 4 different data structures.</p> <p>Then write some skeleton Java code, with empty methods that just return default values.</p> <ul> <li>Winston's office hours at 5pm in evening on Discord</li> </ul>"},{"location":"week-03/Readings-03/","title":"Week 03 Readings","text":""},{"location":"week-03/Readings-03/#cracking-the-coding-interview-mcdowell-the-green-book","title":"Cracking the Coding Interview (McDowell), the green book","text":"<ul> <li> <p>Section VI BigO, pp. 38-42</p> </li> <li> <p>Chapter 4 Trees &amp; Heaps, pp. 100-103</p> </li> </ul> <p>Attempt two problems among these sections and be prepared to prompt the class and lead them in solving it.</p>"},{"location":"week-03/Readings-03/#the-algorithm-design-manual-skiena-the-red-book","title":"The Algorithm Design Manual (Skiena), the red book","text":"<ul> <li>Chapter 2 up to 2.5.2, pp. 31-43</li> <li>Algorithm analysis, big Oh notation, definition, sorting algorithms</li> <li>Section 3.7 Hashing</li> </ul> <p>Problems 2-2, 2-10, 2-15, 3-9</p>"},{"location":"week-03/Readings-03/#data-structures-and-algorithm-analysis-in-java-weiss-the-red-and-white-book","title":"Data Structures and Algorithm Analysis in Java (Weiss), the red and white book","text":"<p>For DSA students doing Java.</p> <ul> <li>Sections 2 to 2.4.2, pp. 29-38</li> <li>Algorithm Analysis</li> <li>Sections 4 to 4.3.4, pp. 101-119</li> <li>Tree, Binary Search</li> <li>Sections 6 to 6.3, pp. 225-237</li> <li>Heaps, Binary Heaps</li> </ul> <p>Become familiar with these Java implementations. You will be asked to write these implementations in class and as part of your code writing  pull requests, given pseudocode.</p>"},{"location":"week-04/2023-10-16/","title":"Week 4 - Day 9","text":"<p>13 October 2023</p>"},{"location":"week-04/2023-10-16/#morning-session","title":"Morning Session","text":"<p>Visualizing data structures https://visualgo.net</p>"},{"location":"week-04/2023-10-16/#heap-review","title":"Heap Review","text":"<ul> <li>Heaps are based on nodes, like linked lists</li> <li>can contain a key and a value</li> <li>key is the priority (like the urgency of a mail package or hospital patient)</li> <li>value is more info to identify the mail package or hospital patient<ul> <li>like the contents / description itself (direct) or an ID number (indirect) into another data source</li> </ul> </li> <li>Balance is key</li> <li>for logarithmic height</li> </ul>"},{"location":"week-04/2023-10-16/#databases-and-dsa","title":"Databases and DSA","text":"<p>Databases are like a data structure that allows flexible search, and some support specialized/ flexible query languages.</p> <ul> <li>Indexes: speed up queries</li> <li>Views: precompiled queries</li> </ul>"},{"location":"week-04/2023-10-16/#general-trees","title":"General Trees","text":"<ul> <li>Arbitrary children (b-trees) are possible:</li> <li>computer storage directory structure</li> <li>website navigation</li> <li>classification trees for species of living things</li> <li>Dewey decimal library classification system</li> <li>Family ancestries</li> </ul>"},{"location":"week-04/2023-10-16/#binary-search-trees","title":"Binary Search Trees","text":"<p>A special class of trees depends on nodes having an ordered set for keys.</p> <ul> <li>Bisection: a more efficient way to search</li> <li>you introduced a bug in software, somewhere in the last 100 commits</li> <li>e.g. egg drop problem</li> <li>depends on sorted data</li> <li>goes to a halfway point, decides whether target is before or after</li> <li>\"divide-and-conquer\" approach</li> </ul> <p>A tree is like a linked list with up to two (or more) possibilities / forks at each point. * We focus on binary trees (up to two children at each node)</p> <ul> <li>BST Invariants</li> <li>left key &lt;= parent key &lt;= right key</li> <li> <p>Balanced invariant</p> </li> <li> <p>Game trees (e.g. playing chess, go, turn-based games)</p> </li> <li>a node contains the game state </li> <li>Breadth-first search</li> <li>Depth-first search</li> <li>How to balance? We'll cover this on Tuesday and Thursday.</li> </ul>"},{"location":"week-04/2023-10-16/#afternoon-session","title":"Afternoon Session","text":""},{"location":"week-04/2023-10-16/#cracking-the-coding-interview","title":"Cracking the Coding Interview","text":"<p>Exercise: * How to determine what concepts are involved in each problem? * How to pick a problem that seems to be similar</p> <p>Attempt problems that use new data structures we've learned: * heaps * hash maps * linked lists</p>"},{"location":"week-04/Assignment-04/","title":"Assignment and Co-Creation Week 04","text":"<p>This week's reading and co-creation assignment has five parts</p>"},{"location":"week-04/Assignment-04/#1-reading-week-04","title":"1. Reading Week 04","text":"<p>Reading-04.md</p>"},{"location":"week-04/Assignment-04/#2-ask-questions-on-other-pull-requests","title":"2. Ask Questions on Other Pull Requests","text":"<p>Pick three pull requests (open or closed) from here: https://github.com/TheEvergreenStateCollege/upper-division-cs/pulls?q=is%3Apr</p> <p>Two that were opened by your classmates, and one from the instructor (learner-long-life).</p> <p>For each one:</p> <ol> <li>Go to their \"Files changed\" view</li> <li>Click on three lines that will help you in your final project, that you have questions about, that you would like to ask the code authors.</li> <li>For each line, type a question and submit it to add to the conversation thread for this pull request.</li> <li>The questions can be because you want to learn more about how to write the code yourself, because you notice what you think may be a mistake or something new or interesting. Remember to use respectful communication.</li> </ol>"},{"location":"week-04/Assignment-04/#3-respond-to-questions-on-your-pull-requests","title":"3. Respond to Questions on Your Pull Requests","text":"<p>Navigate to this URL and find PRs that mention you by name. Find your classmates, or message them on Discord, and discuss their questions and your code. When you think you have at leat a 2-3 sentence response to summarize your conversation, type it into the PR and connect it to your final project.</p> <p>Respond in the spirit of helping your classmates learn and also that they may be wanting to help improve the code you wrote that we will all use.</p> <p>https://github.com/TheEvergreenStateCollege/upper-division-cs/pulls?q=is%3Apr+mentions%3A%40me</p>"},{"location":"week-04/Assignment-04/#4-work-on-one-of-your-pull-requests-ask-for-a-review","title":"4. Work on One of Your Pull Requests, Ask for a Review","text":"<p>We are still implementing data structures in the Java / Maven projects, getting them to compile and pass tests. Work on this step with a pair programming partner. Set up a time to meet on Discord in one of the Study Rooms if you're not able to meet up in class or on-campus.</p> <p>Pick one of your PRs (it could be the one you just had a conversation about above in the previous part) and make at least one commit to it. Your goal is to pass one more unit test. Ask for a review from one or more classmates, and include the instructor as well (@learner-long-life).</p>"},{"location":"week-04/Assignment-04/#5-add-an-entry-to-the-periodic-table","title":"5. Add an Entry to the Periodic Table","text":"<p>Pick an empty entry in the Periodic Table that you have worked on or that you have studied and want to take an educated guess on. Edit this file to include your answer in Big-Oh notation, and include a link to lines of code in the monorepo that back up your answer.</p> <p>https://github.com/TheEvergreenStateCollege/upper-division-cs/blob/main/dsa-23au/PeriodicTable.md</p>"},{"location":"week-04/Assignment-04/#6-datasets-and-data-modeling-final-project","title":"6. Datasets and Data Modeling (Final Project)","text":"<p>Convert any data you have been collecting from a spreadsheet into a CSV file (comma-separated values) and add to the monorepo here.</p> <p>If you have found a data source online that you'd like to use, download and convert to CSV.</p> <p>In your PR, perform the steps of Data Modeling and Analysis following the DMV example in class.</p> <ul> <li>Pick a partner for this activity and take turns presenting your dataset to each other.</li> <li>If you are doing a team project, pick someone on a different team.</li> <li>Be sure to tell the other person how it fits within your goals in life, or for computer science learning</li> <li> <p>When you respond, reflect back what you understood from your partner, and then present something related to it from your own life.</p> </li> <li> <p>Consider your Dataset as living inside a Data Structure with CRUD operations and work through the following steps. Start with a sheet of paper.</p> </li> <li>Define CRUD operations with parameters and types for your dataset, similar to the Periodic Table.</li> <li>The Create / Delete operations should be small and simple. What does a record / datapoint look like?</li> <li>What are the columns, if this were a spreadsheet?</li> <li>Is there more than one table involved? (For example, multiple sheets in a spreadsheet, each with different columns) </li> <li>The Read / Update operations are probably the most complex part and will answer questions you are interested in. For example:<ul> <li>What record / datapoint is the most  or least ? <li>What operation would rearrange the dataset into a more useful form? (Sorting, for example)</li> <li>What operation would produce useful statistics? (for example, the two most correlated columns)</li> <li>What data structures that we've learned so far (arrays, linked lists, stacks, queues, heaps, trees) would be useful?<ul> <li>you can use more than one and combine them. you can add extra variables, like size, tail pointers, etc.</li> </ul> </li> <li>Write pseudo-code (code that doesn't have to compile, but with variable names, loops, assignments, etc.)<ul> <li>include an overall class name. This would be the main class in Java, the one that has the <code>main</code> method that kicks everything else off.</li> <li>include Java class methods for all the CRUD operations you defined above</li> <li>include instance / member variables for your internal data structure representations in the previous step</li> </ul> </li> <li>Create an empty Maven project in the <code>dsa-23au/java-dsa</code> with a name for your team and [following instructions here].</li>"},{"location":"week-04/Projects/","title":"Final Project Updates","text":"<p>This is a work in progress in Week 4. Please keep evolving, revision, iterating, refining your projects. We'll check in again in Week 6, and I'll give you 5 minutes per team to lead a progress update in class, with 5 minute Q&amp;A and discussion.</p>"},{"location":"week-04/Projects/#input-dataset-from-csv","title":"Input Dataset from CSV","text":"<p>List <p>Book(author, publisher)</p>"},{"location":"week-04/Projects/#nathan-mclaughlin-paul-swisher","title":"Nathan McLaughlin, Paul Swisher","text":"<p>Example Input datapoint: Commute(startCity, endCity, mileage, time)</p> <p>Map&gt; driverNameToDriverData; Does weather affect drive time equally?"},{"location":"week-04/Projects/#devin","title":"Devin","text":"<p>Example Input datapoint: DiscordDayMessages(messageCount, day)</p> <p>Array messageCountByDay have a way of mapping from day to index in array What are the major events happening on this Discord server and when?"},{"location":"week-04/Projects/#juniper","title":"Juniper","text":"<p>Looking for teammates Global distribution of value-added for G20 (20 companies that add the most to global economy) from 2016-2022.</p> <p>Example Input Row: CountryPercentGlobalValue(countryName, year, percentValue, avgManufacturingWages)</p> <p>algorithm: loop over combinations of columns, calculate correlations, https://en.wikipedia.org/wiki/Correlation_coefficient Map&lt;?,?&gt;</p> <p>Which change is most correlated with change in wages over time, by country?</p>"},{"location":"week-04/Projects/#dylana","title":"Dylana","text":"<p>Looking for a team Interested in compbio with plant reflexes</p>"},{"location":"week-04/Projects/#torsten","title":"Torsten","text":"<p>Health tracking on Apple app, steps, calories</p> <p>Example Input Row: DayStats(date, stepCount, caloriesBurned, heartRate)</p> <p>Heap lowestHeartRateSoFar <p>TBD: question about health</p>"},{"location":"week-04/Projects/#nathan-deanon","title":"Nathan Deanon","text":"<p>Open to teammates Choosing between two projects:</p>"},{"location":"week-04/Projects/#lottery-winning-numbers-since-2002","title":"lottery winning numbers since 2002","text":"<p>Example Input Row: LotteryDrawing(date, winningNumbers, contest)</p> <p>Array mostFrequentNumbers"},{"location":"week-04/Projects/#hangman-game","title":"Hangman game","text":"<p>dictionary of 400,000 words</p> <p>tree, breaks into letters with A's and not A's</p> <p>LotteryDrawing(date, winningNumbers, contest)</p> <p>Example Input Row: Word(term, definition, ...)</p> <p>Tree wordsByBeginningLetter"},{"location":"week-04/Projects/#damiana","title":"Damiana","text":"<p>Changemakers idea: survey of students and community makers</p> <p>Example Input Row: CommunitySurveyResult(respondent, whatAreProblemsAtEvergreen, possibleSolution1, ...)</p>"},{"location":"week-04/Projects/#suggestion-from-stella","title":"Suggestion from Stella:","text":"<p>matplotlib in python for graphing</p> <p>Suggestion from Joe: Graph with edges waited by number of responses</p> <p>Can put into a SQL server.</p> <p>Map&lt;?,Integer&gt; surveyProblemFrequencyCount</p>"},{"location":"week-04/Projects/#suggestion-from-nathanmcl","title":"Suggestion from NathanMCL","text":"<p>Tri-plot, from matplotlib</p>"},{"location":"week-04/Projects/#suggestion-from-quinn","title":"Suggestion from Quinn:","text":"<p>Use graph, weighting of edges is how frequently those two nodes appear in same response. Nodes are different survey problems.</p>"},{"location":"week-04/Projects/#suggestion-from-paul-pham","title":"Suggestion from Paul Pham","text":""},{"location":"week-04/Projects/#stella","title":"Stella","text":"<p>open to teammates map brainwaves, collect raw data, clean it up, put it into graph Muse headset, need to register SDK</p> <p>Example Input Row: EEGMeasurement(subject, timestamp, deltaDTP9, deltaAF8, ... )</p> <p>Does any of it matter?</p>"},{"location":"week-04/Projects/#dominic-severe","title":"Dominic Severe","text":"<p>open to teammates Look at data on a hard drive in a meaningful way</p> <p>Example Input Row: WholeHardDriveMetadata(id, snapshotTime, ssdOrHD, systemCpuLoad, systemIOLoad, ) HardDriveFile(hardDriveId, filename, location, size, lastModTime, lastReadTime)</p> <p>What files are taking up the most space, or are unused for the longest time?</p>"},{"location":"week-04/Projects/#quinn-allen","title":"Quinn Allen","text":"<p>open to teammates Changemakers, supporting IT needs for students, helping teams determine minimum viable </p> <p>Example Input Row: ProjectSupported(teammate1, teammate2, projectType, ITneed1, ITneed2,)</p>"},{"location":"week-04/Projects/#duc-and-julian-and-quinn-and-damiana","title":"Duc and Julian and Quinn and Damiana","text":"<p>Changemakers: team ideas</p> <ul> <li>Make a video game.</li> <li>Survey of gamers at Evergreen for their favorite hardware, etc.</li> </ul> <p>Changemakers process:</p> <ul> <li>Dialogue</li> <li>Active listening</li> </ul> <p>Level 4 listening: repeating back to make sure you understood.</p> <p>\"Opening your own pre-existing plans and thoughts to be adjusted by another person.\"</p> <p>Iteration: every plan or understanding is going to be subjected to re-iterative revision. Successive refinement of the idea within that vehicle.</p> <p>Customer collaboration, customer visits, flexibility, adaptability, user-centered design, cross-functional teams</p> <p>Prompt for Changemaker students: on Tuesday presentation, consider how to apply these and your</p> <p>Possibilities: Agile development, version control systems, code reviews</p>"},{"location":"week-04/Projects/#richard-weiss","title":"Richard Weiss","text":"<p>Code reviews are often stressful and don't reflect the above principles of active listening, understanding human context, open discussion in a group.</p>"},{"location":"week-04/Projects/#dawson-and-dante","title":"Dawson and Dante","text":"<p>noting which music they listen to, keeping a spreadsheet for a long time. liked songs on Spotify, 3000? connected to last.fm which tracks every song listened to. possible last.fm API is it possible to export your data from Spotify? Ethical / privacy considerations?</p>"},{"location":"week-04/Projects/#question-from-quinn","title":"Question from Quinn","text":"<p>Are you also gathering songs that are skipped?</p>"},{"location":"week-04/Projects/#question-from-paul-swisher","title":"Question from Paul Swisher","text":"<p>Are Fridays, or days of new music releases, more likely to have songs added?</p> <p>What is the most likely time of day songs are added? What music do I dislike?</p>"},{"location":"week-04/Projects/#jonathan","title":"Jonathan","text":"<p>working with Dawson, Dante, Trinity collecting crime reports from agencies in NY splitting it into index of property crime murder, rape, aggravated assault burglary, larceny, motor vehicle theft</p> <p>Example Input Row: Crime(isMurder, isRobbery, isAggroAssault, isRape, isPerpetratorKnown, location, time, ) CrimeRegion(isHigherThanNationalAvg, countyName, )</p> <p>Might limit to high-crime rate regions.</p> <p>Which counties have the highest crime rate in the state / region?</p> <p>How does this correlate with firearm registration rate or population (density) for that county?</p>"},{"location":"week-04/Projects/#david-dunston","title":"David Dunston","text":"<p>open to teammates personal note-taking from phone, collected from 2012/2017, over 309  can apply to other people's notes, useful for creatives (writers) to draw visual synopsys</p> <p>Example Input Row: Note(creationDateTime, modificationDateTime, wordCount, isSongIdea, isInformation, isTodo)</p> <p>Map&gt; categoriesByGranularity; <p>Possible auto-tagging, or clustering notes by similarity, suggest keywords</p>"},{"location":"week-04/Projects/#joe-granville","title":"Joe Granville","text":"<p>circadian system measurements. helping Stella with EEG</p> <p>beginning of Global Business Challenge this morning. some data from farm shipments or proteinaceous animal feed (from insects)</p> <p>in Changemakers, just broken up into big teams.</p> <p>timelapse photos from cactus growing</p>"},{"location":"week-04/Projects/#jonah-eadie","title":"Jonah Eadie","text":"<p>wanting to join a project or team possible dataset idea: company profits by country suggestion: join Juniper's project</p>"},{"location":"week-04/Projects/#sean-sellers","title":"Sean Sellers","text":"<p>Changemakers possible dataset idea: tree species recommendations, branching, leaf size, soil type, etc.</p>"},{"location":"week-04/Projects/#ethical-concerns-of-data-gathering-research","title":"Ethical Concerns of Data Gathering Research","text":"<p>If your project involves gathering data from others (not yourself), you should consider the following and address them in your project How to ask for and record consent of subjects Cybersecurity concerns: security / privacy regarding gender, race, ... HIPAA: government policy FERPA: </p> <p>https://www.evergreen.edu/offices-services/institutional-review-board/evergreen-irb-policy</p>"},{"location":"week-04/Readings-04/","title":"Readings 04","text":"<p>Week 04 Readings</p>"},{"location":"week-04/Readings-04/#cracking-the-coding-interview-mcdowell-the-green-book","title":"Cracking the Coding Interview (McDowell), the green book","text":"<ul> <li> <p>Section VI BigO, pp. 38-42</p> </li> <li> <p>Chapter 4  Heaps, Tries, Graph Search, pp. 103-109</p> </li> <li>Chapter 5  Bit Manipulation, pp. 112-116</li> </ul> <p>Attempt two problems among these sections.</p>"},{"location":"week-04/Readings-04/#the-algorithm-design-manual-skiena-the-red-book","title":"The Algorithm Design Manual (Skiena), the red book","text":"<ul> <li>Section 3.4 - 3.4.3, pp. 81-87</li> <li>Binary Search Trees</li> <li>Section 5 - 5.2</li> <li>Divide-and-Conquer, Binary Search, Bisection</li> <li>Section 7.8</li> <li>Depth-First Search</li> </ul> <p>Problems 3-11, 3-12, 3-16, 5-1, 5-3, 7-8</p>"},{"location":"week-04/Readings-04/#data-structures-and-algorithm-analysis-in-java-weiss-the-red-and-white-book","title":"Data Structures and Algorithm Analysis in Java (Weiss), the red and white book","text":"<ul> <li>Section 10.1.2 Huffman Codes, pp. 433-439</li> </ul> <p>Extra Credit: Worth 1 credit of Upper Division CS at end of quarter for a working RedBlackTree implementation with unit tests Commit into its own Maven project in <code>java-dsa</code> or another directory if you use another language.</p> <ul> <li>Sections 12.2, pp. 549-557</li> <li>Red-Black Tree </li> </ul>"},{"location":"week-08/chapter_8/","title":"Chapter 8: Parallel---Distributed---Quantum","text":""},{"location":"week-09/chapter_9/","title":"Chapter 9: Outro---Five Systems","text":""}]}