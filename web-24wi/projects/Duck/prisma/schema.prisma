// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User Model
model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  username  String    @unique
  password  String
  wishlist  Wishlist?
}

//Product Model, can appear in multiple wishlist
model Product {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  image       PICTURE_CATEGORY @default(FOOD)
  name        String           @db.VarChar(255)
  description String
  wishlist    Wishlist[]
  productbind Wishlist?        @relation("productId")

  @@unique([id])
}

//Image category, use to categorize image instead of writing an image in the db
enum PICTURE_CATEGORY {
  FOOD
  UTILITIES
  PET_CARE
  HABITAT
}

//Cart/Wishlist model, can have multiple products
model Wishlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @db.VarChar(255)
  body String

  productId          String    @default("")
  belongsToProductId Product   @relation("productId", fields: [productId], references: [id])
  belongsToId        String
  belongsTo          User      @relation(fields: [id], references: [id])
  product            Product[]

  @@unique([productId])
}

// proposed wishlist model by Paul, with the correct relations on what it should be if a user can have
// multiple wishlist, unfortunately it gives me more error than expect and I was completely burnout on this
// projectso I add it in comments here and keep the old one for working version

// model Wishlist {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name String @db.VarChar(255)
//   body String

//   productId          String    @default("")
//   belongsToProductId Product   @relation("productId", fields: [productId], references: [id])
//   belongsToId        String
//   belongsTo          User      @relation(fields: [belongsToId], references: [id])
//   product            Product[]

//   @@unique([productId])
//   @@unique([belongsToId])
// }
