
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model game
 * 
 */
export type game = $Result.DefaultSelection<Prisma.$gamePayload>
/**
 * Model game_participant
 * 
 */
export type game_participant = $Result.DefaultSelection<Prisma.$game_participantPayload>
/**
 * Model move
 * 
 */
export type move = $Result.DefaultSelection<Prisma.$movePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.gameDelegate<ExtArgs>;

  /**
   * `prisma.game_participant`: Exposes CRUD operations for the **game_participant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Game_participants
    * const game_participants = await prisma.game_participant.findMany()
    * ```
    */
  get game_participant(): Prisma.game_participantDelegate<ExtArgs>;

  /**
   * `prisma.move`: Exposes CRUD operations for the **move** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Moves
    * const moves = await prisma.move.findMany()
    * ```
    */
  get move(): Prisma.moveDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.1
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    game: 'game',
    game_participant: 'game_participant',
    move: 'move'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'game' | 'game_participant' | 'move'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      game: {
        payload: Prisma.$gamePayload<ExtArgs>
        fields: Prisma.gameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.gameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.gameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          findFirst: {
            args: Prisma.gameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.gameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          findMany: {
            args: Prisma.gameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>[]
          }
          create: {
            args: Prisma.gameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          createMany: {
            args: Prisma.gameCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.gameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          update: {
            args: Prisma.gameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          deleteMany: {
            args: Prisma.gameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.gameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.gameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.gameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.gameCountArgs<ExtArgs>,
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      game_participant: {
        payload: Prisma.$game_participantPayload<ExtArgs>
        fields: Prisma.game_participantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.game_participantFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$game_participantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.game_participantFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$game_participantPayload>
          }
          findFirst: {
            args: Prisma.game_participantFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$game_participantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.game_participantFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$game_participantPayload>
          }
          findMany: {
            args: Prisma.game_participantFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$game_participantPayload>[]
          }
          create: {
            args: Prisma.game_participantCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$game_participantPayload>
          }
          createMany: {
            args: Prisma.game_participantCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.game_participantDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$game_participantPayload>
          }
          update: {
            args: Prisma.game_participantUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$game_participantPayload>
          }
          deleteMany: {
            args: Prisma.game_participantDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.game_participantUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.game_participantUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$game_participantPayload>
          }
          aggregate: {
            args: Prisma.Game_participantAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGame_participant>
          }
          groupBy: {
            args: Prisma.game_participantGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Game_participantGroupByOutputType>[]
          }
          count: {
            args: Prisma.game_participantCountArgs<ExtArgs>,
            result: $Utils.Optional<Game_participantCountAggregateOutputType> | number
          }
        }
      }
      move: {
        payload: Prisma.$movePayload<ExtArgs>
        fields: Prisma.moveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.moveFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$movePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.moveFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$movePayload>
          }
          findFirst: {
            args: Prisma.moveFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$movePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.moveFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$movePayload>
          }
          findMany: {
            args: Prisma.moveFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$movePayload>[]
          }
          create: {
            args: Prisma.moveCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$movePayload>
          }
          createMany: {
            args: Prisma.moveCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.moveDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$movePayload>
          }
          update: {
            args: Prisma.moveUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$movePayload>
          }
          deleteMany: {
            args: Prisma.moveDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.moveUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.moveUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$movePayload>
          }
          aggregate: {
            args: Prisma.MoveAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMove>
          }
          groupBy: {
            args: Prisma.moveGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MoveGroupByOutputType>[]
          }
          count: {
            args: Prisma.moveCountArgs<ExtArgs>,
            result: $Utils.Optional<MoveCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    games: number
    move: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | UserCountOutputTypeCountGamesArgs
    move?: boolean | UserCountOutputTypeCountMoveArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_participantWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMoveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: moveWhereInput
  }



  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    user_games: number
    move: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_games?: boolean | GameCountOutputTypeCountUser_gamesArgs
    move?: boolean | GameCountOutputTypeCountMoveArgs
  }

  // Custom InputTypes

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountUser_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_participantWhereInput
  }


  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountMoveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: moveWhereInput
  }



  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    username: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    username: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    username: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    username?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    username?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    username: string
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    username?: boolean
    password?: boolean
    games?: boolean | user$gamesArgs<ExtArgs>
    move?: boolean | user$moveArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    createdAt?: boolean
    username?: boolean
    password?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | user$gamesArgs<ExtArgs>
    move?: boolean | user$moveArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      games: Prisma.$game_participantPayload<ExtArgs>[]
      move: Prisma.$movePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      username: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    games<T extends user$gamesArgs<ExtArgs> = {}>(args?: Subset<T, user$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'findMany'> | Null>;

    move<T extends user$moveArgs<ExtArgs> = {}>(args?: Subset<T, user$moveArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'String'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
    readonly username: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.games
   */
  export type user$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    where?: game_participantWhereInput
    orderBy?: game_participantOrderByWithRelationInput | game_participantOrderByWithRelationInput[]
    cursor?: game_participantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Game_participantScalarFieldEnum | Game_participantScalarFieldEnum[]
  }


  /**
   * user.move
   */
  export type user$moveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    where?: moveWhereInput
    orderBy?: moveOrderByWithRelationInput | moveOrderByWithRelationInput[]
    cursor?: moveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MoveScalarFieldEnum | MoveScalarFieldEnum[]
  }


  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
  }



  /**
   * Model game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    start: Date | null
    end: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    start: Date | null
    end: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    start: number
    end: number
    _all: number
  }


  export type GameMinAggregateInputType = {
    id?: true
    start?: true
    end?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    start?: true
    end?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    start?: true
    end?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game to aggregate.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type gameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gameWhereInput
    orderBy?: gameOrderByWithAggregationInput | gameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: gameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: string
    start: Date
    end: Date | null
    _count: GameCountAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends gameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type gameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    start?: boolean
    end?: boolean
    user_games?: boolean | game$user_gamesArgs<ExtArgs>
    move?: boolean | game$moveArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type gameSelectScalar = {
    id?: boolean
    start?: boolean
    end?: boolean
  }

  export type gameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_games?: boolean | game$user_gamesArgs<ExtArgs>
    move?: boolean | game$moveArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $gamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "game"
    objects: {
      user_games: Prisma.$game_participantPayload<ExtArgs>[]
      move: Prisma.$movePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      start: Date
      end: Date | null
    }, ExtArgs["result"]["game"]>
    composites: {}
  }


  type gameGetPayload<S extends boolean | null | undefined | gameDefaultArgs> = $Result.GetResult<Prisma.$gamePayload, S>

  type gameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<gameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface gameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game'], meta: { name: 'game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {gameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends gameFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, gameFindUniqueArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Game that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {gameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends gameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, gameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends gameFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, gameFindFirstArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends gameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, gameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends gameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, gameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Game.
     * @param {gameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
    **/
    create<T extends gameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, gameCreateArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Games.
     *     @param {gameCreateManyArgs} args - Arguments to create many Games.
     *     @example
     *     // Create many Games
     *     const game = await prisma.game.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends gameCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, gameCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {gameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
    **/
    delete<T extends gameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, gameDeleteArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Game.
     * @param {gameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends gameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, gameUpdateArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {gameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends gameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, gameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends gameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, gameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {gameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
    **/
    upsert<T extends gameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, gameUpsertArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends gameCountArgs>(
      args?: Subset<T, gameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends gameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: gameGroupByArgs['orderBy'] }
        : { orderBy?: gameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, gameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the game model
   */
  readonly fields: gameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__gameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user_games<T extends game$user_gamesArgs<ExtArgs> = {}>(args?: Subset<T, game$user_gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'findMany'> | Null>;

    move<T extends game$moveArgs<ExtArgs> = {}>(args?: Subset<T, game$moveArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the game model
   */ 
  interface gameFieldRefs {
    readonly id: FieldRef<"game", 'String'>
    readonly start: FieldRef<"game", 'DateTime'>
    readonly end: FieldRef<"game", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * game findUnique
   */
  export type gameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where: gameWhereUniqueInput
  }


  /**
   * game findUniqueOrThrow
   */
  export type gameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where: gameWhereUniqueInput
  }


  /**
   * game findFirst
   */
  export type gameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }


  /**
   * game findFirstOrThrow
   */
  export type gameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }


  /**
   * game findMany
   */
  export type gameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which games to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }


  /**
   * game create
   */
  export type gameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * The data needed to create a game.
     */
    data?: XOR<gameCreateInput, gameUncheckedCreateInput>
  }


  /**
   * game createMany
   */
  export type gameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many games.
     */
    data: gameCreateManyInput | gameCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * game update
   */
  export type gameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * The data needed to update a game.
     */
    data: XOR<gameUpdateInput, gameUncheckedUpdateInput>
    /**
     * Choose, which game to update.
     */
    where: gameWhereUniqueInput
  }


  /**
   * game updateMany
   */
  export type gameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update games.
     */
    data: XOR<gameUpdateManyMutationInput, gameUncheckedUpdateManyInput>
    /**
     * Filter which games to update
     */
    where?: gameWhereInput
  }


  /**
   * game upsert
   */
  export type gameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * The filter to search for the game to update in case it exists.
     */
    where: gameWhereUniqueInput
    /**
     * In case the game found by the `where` argument doesn't exist, create a new game with this data.
     */
    create: XOR<gameCreateInput, gameUncheckedCreateInput>
    /**
     * In case the game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<gameUpdateInput, gameUncheckedUpdateInput>
  }


  /**
   * game delete
   */
  export type gameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter which game to delete.
     */
    where: gameWhereUniqueInput
  }


  /**
   * game deleteMany
   */
  export type gameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which games to delete
     */
    where?: gameWhereInput
  }


  /**
   * game.user_games
   */
  export type game$user_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    where?: game_participantWhereInput
    orderBy?: game_participantOrderByWithRelationInput | game_participantOrderByWithRelationInput[]
    cursor?: game_participantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Game_participantScalarFieldEnum | Game_participantScalarFieldEnum[]
  }


  /**
   * game.move
   */
  export type game$moveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    where?: moveWhereInput
    orderBy?: moveOrderByWithRelationInput | moveOrderByWithRelationInput[]
    cursor?: moveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MoveScalarFieldEnum | MoveScalarFieldEnum[]
  }


  /**
   * game without action
   */
  export type gameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: gameInclude<ExtArgs> | null
  }



  /**
   * Model game_participant
   */

  export type AggregateGame_participant = {
    _count: Game_participantCountAggregateOutputType | null
    _min: Game_participantMinAggregateOutputType | null
    _max: Game_participantMaxAggregateOutputType | null
  }

  export type Game_participantMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    game_id: string | null
  }

  export type Game_participantMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    game_id: string | null
  }

  export type Game_participantCountAggregateOutputType = {
    id: number
    user_id: number
    game_id: number
    _all: number
  }


  export type Game_participantMinAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
  }

  export type Game_participantMaxAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
  }

  export type Game_participantCountAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    _all?: true
  }

  export type Game_participantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game_participant to aggregate.
     */
    where?: game_participantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_participants to fetch.
     */
    orderBy?: game_participantOrderByWithRelationInput | game_participantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: game_participantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned game_participants
    **/
    _count?: true | Game_participantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Game_participantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Game_participantMaxAggregateInputType
  }

  export type GetGame_participantAggregateType<T extends Game_participantAggregateArgs> = {
        [P in keyof T & keyof AggregateGame_participant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame_participant[P]>
      : GetScalarType<T[P], AggregateGame_participant[P]>
  }




  export type game_participantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_participantWhereInput
    orderBy?: game_participantOrderByWithAggregationInput | game_participantOrderByWithAggregationInput[]
    by: Game_participantScalarFieldEnum[] | Game_participantScalarFieldEnum
    having?: game_participantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Game_participantCountAggregateInputType | true
    _min?: Game_participantMinAggregateInputType
    _max?: Game_participantMaxAggregateInputType
  }

  export type Game_participantGroupByOutputType = {
    id: string
    user_id: string
    game_id: string
    _count: Game_participantCountAggregateOutputType | null
    _min: Game_participantMinAggregateOutputType | null
    _max: Game_participantMaxAggregateOutputType | null
  }

  type GetGame_participantGroupByPayload<T extends game_participantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Game_participantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Game_participantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Game_participantGroupByOutputType[P]>
            : GetScalarType<T[P], Game_participantGroupByOutputType[P]>
        }
      >
    >


  export type game_participantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    game_id?: boolean
    user_fk?: boolean | userDefaultArgs<ExtArgs>
    game_fk?: boolean | gameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game_participant"]>

  export type game_participantSelectScalar = {
    id?: boolean
    user_id?: boolean
    game_id?: boolean
  }

  export type game_participantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_fk?: boolean | userDefaultArgs<ExtArgs>
    game_fk?: boolean | gameDefaultArgs<ExtArgs>
  }


  export type $game_participantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "game_participant"
    objects: {
      user_fk: Prisma.$userPayload<ExtArgs>
      game_fk: Prisma.$gamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      game_id: string
    }, ExtArgs["result"]["game_participant"]>
    composites: {}
  }


  type game_participantGetPayload<S extends boolean | null | undefined | game_participantDefaultArgs> = $Result.GetResult<Prisma.$game_participantPayload, S>

  type game_participantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<game_participantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Game_participantCountAggregateInputType | true
    }

  export interface game_participantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game_participant'], meta: { name: 'game_participant' } }
    /**
     * Find zero or one Game_participant that matches the filter.
     * @param {game_participantFindUniqueArgs} args - Arguments to find a Game_participant
     * @example
     * // Get one Game_participant
     * const game_participant = await prisma.game_participant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends game_participantFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, game_participantFindUniqueArgs<ExtArgs>>
    ): Prisma__game_participantClient<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Game_participant that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {game_participantFindUniqueOrThrowArgs} args - Arguments to find a Game_participant
     * @example
     * // Get one Game_participant
     * const game_participant = await prisma.game_participant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends game_participantFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, game_participantFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__game_participantClient<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Game_participant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_participantFindFirstArgs} args - Arguments to find a Game_participant
     * @example
     * // Get one Game_participant
     * const game_participant = await prisma.game_participant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends game_participantFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, game_participantFindFirstArgs<ExtArgs>>
    ): Prisma__game_participantClient<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Game_participant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_participantFindFirstOrThrowArgs} args - Arguments to find a Game_participant
     * @example
     * // Get one Game_participant
     * const game_participant = await prisma.game_participant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends game_participantFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, game_participantFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__game_participantClient<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Game_participants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_participantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Game_participants
     * const game_participants = await prisma.game_participant.findMany()
     * 
     * // Get first 10 Game_participants
     * const game_participants = await prisma.game_participant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const game_participantWithIdOnly = await prisma.game_participant.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends game_participantFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, game_participantFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Game_participant.
     * @param {game_participantCreateArgs} args - Arguments to create a Game_participant.
     * @example
     * // Create one Game_participant
     * const Game_participant = await prisma.game_participant.create({
     *   data: {
     *     // ... data to create a Game_participant
     *   }
     * })
     * 
    **/
    create<T extends game_participantCreateArgs<ExtArgs>>(
      args: SelectSubset<T, game_participantCreateArgs<ExtArgs>>
    ): Prisma__game_participantClient<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Game_participants.
     *     @param {game_participantCreateManyArgs} args - Arguments to create many Game_participants.
     *     @example
     *     // Create many Game_participants
     *     const game_participant = await prisma.game_participant.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends game_participantCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, game_participantCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game_participant.
     * @param {game_participantDeleteArgs} args - Arguments to delete one Game_participant.
     * @example
     * // Delete one Game_participant
     * const Game_participant = await prisma.game_participant.delete({
     *   where: {
     *     // ... filter to delete one Game_participant
     *   }
     * })
     * 
    **/
    delete<T extends game_participantDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, game_participantDeleteArgs<ExtArgs>>
    ): Prisma__game_participantClient<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Game_participant.
     * @param {game_participantUpdateArgs} args - Arguments to update one Game_participant.
     * @example
     * // Update one Game_participant
     * const game_participant = await prisma.game_participant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends game_participantUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, game_participantUpdateArgs<ExtArgs>>
    ): Prisma__game_participantClient<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Game_participants.
     * @param {game_participantDeleteManyArgs} args - Arguments to filter Game_participants to delete.
     * @example
     * // Delete a few Game_participants
     * const { count } = await prisma.game_participant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends game_participantDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, game_participantDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Game_participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_participantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Game_participants
     * const game_participant = await prisma.game_participant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends game_participantUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, game_participantUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game_participant.
     * @param {game_participantUpsertArgs} args - Arguments to update or create a Game_participant.
     * @example
     * // Update or create a Game_participant
     * const game_participant = await prisma.game_participant.upsert({
     *   create: {
     *     // ... data to create a Game_participant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game_participant we want to update
     *   }
     * })
    **/
    upsert<T extends game_participantUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, game_participantUpsertArgs<ExtArgs>>
    ): Prisma__game_participantClient<$Result.GetResult<Prisma.$game_participantPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Game_participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_participantCountArgs} args - Arguments to filter Game_participants to count.
     * @example
     * // Count the number of Game_participants
     * const count = await prisma.game_participant.count({
     *   where: {
     *     // ... the filter for the Game_participants we want to count
     *   }
     * })
    **/
    count<T extends game_participantCountArgs>(
      args?: Subset<T, game_participantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Game_participantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game_participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_participantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Game_participantAggregateArgs>(args: Subset<T, Game_participantAggregateArgs>): Prisma.PrismaPromise<GetGame_participantAggregateType<T>>

    /**
     * Group by Game_participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_participantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends game_participantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: game_participantGroupByArgs['orderBy'] }
        : { orderBy?: game_participantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, game_participantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGame_participantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the game_participant model
   */
  readonly fields: game_participantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for game_participant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__game_participantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user_fk<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    game_fk<T extends gameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, gameDefaultArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the game_participant model
   */ 
  interface game_participantFieldRefs {
    readonly id: FieldRef<"game_participant", 'String'>
    readonly user_id: FieldRef<"game_participant", 'String'>
    readonly game_id: FieldRef<"game_participant", 'String'>
  }
    

  // Custom InputTypes

  /**
   * game_participant findUnique
   */
  export type game_participantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    /**
     * Filter, which game_participant to fetch.
     */
    where: game_participantWhereUniqueInput
  }


  /**
   * game_participant findUniqueOrThrow
   */
  export type game_participantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    /**
     * Filter, which game_participant to fetch.
     */
    where: game_participantWhereUniqueInput
  }


  /**
   * game_participant findFirst
   */
  export type game_participantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    /**
     * Filter, which game_participant to fetch.
     */
    where?: game_participantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_participants to fetch.
     */
    orderBy?: game_participantOrderByWithRelationInput | game_participantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for game_participants.
     */
    cursor?: game_participantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of game_participants.
     */
    distinct?: Game_participantScalarFieldEnum | Game_participantScalarFieldEnum[]
  }


  /**
   * game_participant findFirstOrThrow
   */
  export type game_participantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    /**
     * Filter, which game_participant to fetch.
     */
    where?: game_participantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_participants to fetch.
     */
    orderBy?: game_participantOrderByWithRelationInput | game_participantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for game_participants.
     */
    cursor?: game_participantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of game_participants.
     */
    distinct?: Game_participantScalarFieldEnum | Game_participantScalarFieldEnum[]
  }


  /**
   * game_participant findMany
   */
  export type game_participantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    /**
     * Filter, which game_participants to fetch.
     */
    where?: game_participantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_participants to fetch.
     */
    orderBy?: game_participantOrderByWithRelationInput | game_participantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing game_participants.
     */
    cursor?: game_participantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_participants.
     */
    skip?: number
    distinct?: Game_participantScalarFieldEnum | Game_participantScalarFieldEnum[]
  }


  /**
   * game_participant create
   */
  export type game_participantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    /**
     * The data needed to create a game_participant.
     */
    data: XOR<game_participantCreateInput, game_participantUncheckedCreateInput>
  }


  /**
   * game_participant createMany
   */
  export type game_participantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many game_participants.
     */
    data: game_participantCreateManyInput | game_participantCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * game_participant update
   */
  export type game_participantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    /**
     * The data needed to update a game_participant.
     */
    data: XOR<game_participantUpdateInput, game_participantUncheckedUpdateInput>
    /**
     * Choose, which game_participant to update.
     */
    where: game_participantWhereUniqueInput
  }


  /**
   * game_participant updateMany
   */
  export type game_participantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update game_participants.
     */
    data: XOR<game_participantUpdateManyMutationInput, game_participantUncheckedUpdateManyInput>
    /**
     * Filter which game_participants to update
     */
    where?: game_participantWhereInput
  }


  /**
   * game_participant upsert
   */
  export type game_participantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    /**
     * The filter to search for the game_participant to update in case it exists.
     */
    where: game_participantWhereUniqueInput
    /**
     * In case the game_participant found by the `where` argument doesn't exist, create a new game_participant with this data.
     */
    create: XOR<game_participantCreateInput, game_participantUncheckedCreateInput>
    /**
     * In case the game_participant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<game_participantUpdateInput, game_participantUncheckedUpdateInput>
  }


  /**
   * game_participant delete
   */
  export type game_participantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
    /**
     * Filter which game_participant to delete.
     */
    where: game_participantWhereUniqueInput
  }


  /**
   * game_participant deleteMany
   */
  export type game_participantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game_participants to delete
     */
    where?: game_participantWhereInput
  }


  /**
   * game_participant without action
   */
  export type game_participantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_participant
     */
    select?: game_participantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: game_participantInclude<ExtArgs> | null
  }



  /**
   * Model move
   */

  export type AggregateMove = {
    _count: MoveCountAggregateOutputType | null
    _min: MoveMinAggregateOutputType | null
    _max: MoveMaxAggregateOutputType | null
  }

  export type MoveMinAggregateOutputType = {
    id: string | null
    fen_string: string | null
    timestamp: Date | null
    user_id: string | null
    game_id: string | null
  }

  export type MoveMaxAggregateOutputType = {
    id: string | null
    fen_string: string | null
    timestamp: Date | null
    user_id: string | null
    game_id: string | null
  }

  export type MoveCountAggregateOutputType = {
    id: number
    fen_string: number
    timestamp: number
    user_id: number
    game_id: number
    _all: number
  }


  export type MoveMinAggregateInputType = {
    id?: true
    fen_string?: true
    timestamp?: true
    user_id?: true
    game_id?: true
  }

  export type MoveMaxAggregateInputType = {
    id?: true
    fen_string?: true
    timestamp?: true
    user_id?: true
    game_id?: true
  }

  export type MoveCountAggregateInputType = {
    id?: true
    fen_string?: true
    timestamp?: true
    user_id?: true
    game_id?: true
    _all?: true
  }

  export type MoveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which move to aggregate.
     */
    where?: moveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of moves to fetch.
     */
    orderBy?: moveOrderByWithRelationInput | moveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: moveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` moves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` moves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned moves
    **/
    _count?: true | MoveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MoveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MoveMaxAggregateInputType
  }

  export type GetMoveAggregateType<T extends MoveAggregateArgs> = {
        [P in keyof T & keyof AggregateMove]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMove[P]>
      : GetScalarType<T[P], AggregateMove[P]>
  }




  export type moveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: moveWhereInput
    orderBy?: moveOrderByWithAggregationInput | moveOrderByWithAggregationInput[]
    by: MoveScalarFieldEnum[] | MoveScalarFieldEnum
    having?: moveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MoveCountAggregateInputType | true
    _min?: MoveMinAggregateInputType
    _max?: MoveMaxAggregateInputType
  }

  export type MoveGroupByOutputType = {
    id: string
    fen_string: string
    timestamp: Date
    user_id: string
    game_id: string
    _count: MoveCountAggregateOutputType | null
    _min: MoveMinAggregateOutputType | null
    _max: MoveMaxAggregateOutputType | null
  }

  type GetMoveGroupByPayload<T extends moveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MoveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MoveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MoveGroupByOutputType[P]>
            : GetScalarType<T[P], MoveGroupByOutputType[P]>
        }
      >
    >


  export type moveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fen_string?: boolean
    timestamp?: boolean
    user_id?: boolean
    game_id?: boolean
    user_fk?: boolean | userDefaultArgs<ExtArgs>
    game_fk?: boolean | gameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["move"]>

  export type moveSelectScalar = {
    id?: boolean
    fen_string?: boolean
    timestamp?: boolean
    user_id?: boolean
    game_id?: boolean
  }

  export type moveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_fk?: boolean | userDefaultArgs<ExtArgs>
    game_fk?: boolean | gameDefaultArgs<ExtArgs>
  }


  export type $movePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "move"
    objects: {
      user_fk: Prisma.$userPayload<ExtArgs>
      game_fk: Prisma.$gamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fen_string: string
      timestamp: Date
      user_id: string
      game_id: string
    }, ExtArgs["result"]["move"]>
    composites: {}
  }


  type moveGetPayload<S extends boolean | null | undefined | moveDefaultArgs> = $Result.GetResult<Prisma.$movePayload, S>

  type moveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<moveFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MoveCountAggregateInputType | true
    }

  export interface moveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['move'], meta: { name: 'move' } }
    /**
     * Find zero or one Move that matches the filter.
     * @param {moveFindUniqueArgs} args - Arguments to find a Move
     * @example
     * // Get one Move
     * const move = await prisma.move.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends moveFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, moveFindUniqueArgs<ExtArgs>>
    ): Prisma__moveClient<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Move that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {moveFindUniqueOrThrowArgs} args - Arguments to find a Move
     * @example
     * // Get one Move
     * const move = await prisma.move.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends moveFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, moveFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__moveClient<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Move that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moveFindFirstArgs} args - Arguments to find a Move
     * @example
     * // Get one Move
     * const move = await prisma.move.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends moveFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, moveFindFirstArgs<ExtArgs>>
    ): Prisma__moveClient<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Move that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moveFindFirstOrThrowArgs} args - Arguments to find a Move
     * @example
     * // Get one Move
     * const move = await prisma.move.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends moveFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, moveFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__moveClient<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Moves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moveFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Moves
     * const moves = await prisma.move.findMany()
     * 
     * // Get first 10 Moves
     * const moves = await prisma.move.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const moveWithIdOnly = await prisma.move.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends moveFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, moveFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Move.
     * @param {moveCreateArgs} args - Arguments to create a Move.
     * @example
     * // Create one Move
     * const Move = await prisma.move.create({
     *   data: {
     *     // ... data to create a Move
     *   }
     * })
     * 
    **/
    create<T extends moveCreateArgs<ExtArgs>>(
      args: SelectSubset<T, moveCreateArgs<ExtArgs>>
    ): Prisma__moveClient<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Moves.
     *     @param {moveCreateManyArgs} args - Arguments to create many Moves.
     *     @example
     *     // Create many Moves
     *     const move = await prisma.move.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends moveCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, moveCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Move.
     * @param {moveDeleteArgs} args - Arguments to delete one Move.
     * @example
     * // Delete one Move
     * const Move = await prisma.move.delete({
     *   where: {
     *     // ... filter to delete one Move
     *   }
     * })
     * 
    **/
    delete<T extends moveDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, moveDeleteArgs<ExtArgs>>
    ): Prisma__moveClient<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Move.
     * @param {moveUpdateArgs} args - Arguments to update one Move.
     * @example
     * // Update one Move
     * const move = await prisma.move.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends moveUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, moveUpdateArgs<ExtArgs>>
    ): Prisma__moveClient<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Moves.
     * @param {moveDeleteManyArgs} args - Arguments to filter Moves to delete.
     * @example
     * // Delete a few Moves
     * const { count } = await prisma.move.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends moveDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, moveDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Moves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Moves
     * const move = await prisma.move.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends moveUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, moveUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Move.
     * @param {moveUpsertArgs} args - Arguments to update or create a Move.
     * @example
     * // Update or create a Move
     * const move = await prisma.move.upsert({
     *   create: {
     *     // ... data to create a Move
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Move we want to update
     *   }
     * })
    **/
    upsert<T extends moveUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, moveUpsertArgs<ExtArgs>>
    ): Prisma__moveClient<$Result.GetResult<Prisma.$movePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Moves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moveCountArgs} args - Arguments to filter Moves to count.
     * @example
     * // Count the number of Moves
     * const count = await prisma.move.count({
     *   where: {
     *     // ... the filter for the Moves we want to count
     *   }
     * })
    **/
    count<T extends moveCountArgs>(
      args?: Subset<T, moveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MoveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Move.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MoveAggregateArgs>(args: Subset<T, MoveAggregateArgs>): Prisma.PrismaPromise<GetMoveAggregateType<T>>

    /**
     * Group by Move.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends moveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: moveGroupByArgs['orderBy'] }
        : { orderBy?: moveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, moveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMoveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the move model
   */
  readonly fields: moveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for move.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__moveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user_fk<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    game_fk<T extends gameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, gameDefaultArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the move model
   */ 
  interface moveFieldRefs {
    readonly id: FieldRef<"move", 'String'>
    readonly fen_string: FieldRef<"move", 'String'>
    readonly timestamp: FieldRef<"move", 'DateTime'>
    readonly user_id: FieldRef<"move", 'String'>
    readonly game_id: FieldRef<"move", 'String'>
  }
    

  // Custom InputTypes

  /**
   * move findUnique
   */
  export type moveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    /**
     * Filter, which move to fetch.
     */
    where: moveWhereUniqueInput
  }


  /**
   * move findUniqueOrThrow
   */
  export type moveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    /**
     * Filter, which move to fetch.
     */
    where: moveWhereUniqueInput
  }


  /**
   * move findFirst
   */
  export type moveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    /**
     * Filter, which move to fetch.
     */
    where?: moveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of moves to fetch.
     */
    orderBy?: moveOrderByWithRelationInput | moveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for moves.
     */
    cursor?: moveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` moves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` moves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of moves.
     */
    distinct?: MoveScalarFieldEnum | MoveScalarFieldEnum[]
  }


  /**
   * move findFirstOrThrow
   */
  export type moveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    /**
     * Filter, which move to fetch.
     */
    where?: moveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of moves to fetch.
     */
    orderBy?: moveOrderByWithRelationInput | moveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for moves.
     */
    cursor?: moveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` moves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` moves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of moves.
     */
    distinct?: MoveScalarFieldEnum | MoveScalarFieldEnum[]
  }


  /**
   * move findMany
   */
  export type moveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    /**
     * Filter, which moves to fetch.
     */
    where?: moveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of moves to fetch.
     */
    orderBy?: moveOrderByWithRelationInput | moveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing moves.
     */
    cursor?: moveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` moves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` moves.
     */
    skip?: number
    distinct?: MoveScalarFieldEnum | MoveScalarFieldEnum[]
  }


  /**
   * move create
   */
  export type moveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    /**
     * The data needed to create a move.
     */
    data: XOR<moveCreateInput, moveUncheckedCreateInput>
  }


  /**
   * move createMany
   */
  export type moveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many moves.
     */
    data: moveCreateManyInput | moveCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * move update
   */
  export type moveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    /**
     * The data needed to update a move.
     */
    data: XOR<moveUpdateInput, moveUncheckedUpdateInput>
    /**
     * Choose, which move to update.
     */
    where: moveWhereUniqueInput
  }


  /**
   * move updateMany
   */
  export type moveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update moves.
     */
    data: XOR<moveUpdateManyMutationInput, moveUncheckedUpdateManyInput>
    /**
     * Filter which moves to update
     */
    where?: moveWhereInput
  }


  /**
   * move upsert
   */
  export type moveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    /**
     * The filter to search for the move to update in case it exists.
     */
    where: moveWhereUniqueInput
    /**
     * In case the move found by the `where` argument doesn't exist, create a new move with this data.
     */
    create: XOR<moveCreateInput, moveUncheckedCreateInput>
    /**
     * In case the move was found with the provided `where` argument, update it with this data.
     */
    update: XOR<moveUpdateInput, moveUncheckedUpdateInput>
  }


  /**
   * move delete
   */
  export type moveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
    /**
     * Filter which move to delete.
     */
    where: moveWhereUniqueInput
  }


  /**
   * move deleteMany
   */
  export type moveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which moves to delete
     */
    where?: moveWhereInput
  }


  /**
   * move without action
   */
  export type moveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the move
     */
    select?: moveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: moveInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    username: 'username',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    start: 'start',
    end: 'end'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const Game_participantScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    game_id: 'game_id'
  };

  export type Game_participantScalarFieldEnum = (typeof Game_participantScalarFieldEnum)[keyof typeof Game_participantScalarFieldEnum]


  export const MoveScalarFieldEnum: {
    id: 'id',
    fen_string: 'fen_string',
    timestamp: 'timestamp',
    user_id: 'user_id',
    game_id: 'game_id'
  };

  export type MoveScalarFieldEnum = (typeof MoveScalarFieldEnum)[keyof typeof MoveScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: StringFilter<"user"> | string
    createdAt?: DateTimeFilter<"user"> | Date | string
    username?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    games?: Game_participantListRelationFilter
    move?: MoveListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    password?: SortOrder
    games?: game_participantOrderByRelationAggregateInput
    move?: moveOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    createdAt?: DateTimeFilter<"user"> | Date | string
    password?: StringFilter<"user"> | string
    games?: Game_participantListRelationFilter
    move?: MoveListRelationFilter
  }, "id" | "username">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"user"> | string
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    username?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
  }

  export type gameWhereInput = {
    AND?: gameWhereInput | gameWhereInput[]
    OR?: gameWhereInput[]
    NOT?: gameWhereInput | gameWhereInput[]
    id?: StringFilter<"game"> | string
    start?: DateTimeFilter<"game"> | Date | string
    end?: DateTimeNullableFilter<"game"> | Date | string | null
    user_games?: Game_participantListRelationFilter
    move?: MoveListRelationFilter
  }

  export type gameOrderByWithRelationInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrderInput | SortOrder
    user_games?: game_participantOrderByRelationAggregateInput
    move?: moveOrderByRelationAggregateInput
  }

  export type gameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: gameWhereInput | gameWhereInput[]
    OR?: gameWhereInput[]
    NOT?: gameWhereInput | gameWhereInput[]
    start?: DateTimeFilter<"game"> | Date | string
    end?: DateTimeNullableFilter<"game"> | Date | string | null
    user_games?: Game_participantListRelationFilter
    move?: MoveListRelationFilter
  }, "id">

  export type gameOrderByWithAggregationInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrderInput | SortOrder
    _count?: gameCountOrderByAggregateInput
    _max?: gameMaxOrderByAggregateInput
    _min?: gameMinOrderByAggregateInput
  }

  export type gameScalarWhereWithAggregatesInput = {
    AND?: gameScalarWhereWithAggregatesInput | gameScalarWhereWithAggregatesInput[]
    OR?: gameScalarWhereWithAggregatesInput[]
    NOT?: gameScalarWhereWithAggregatesInput | gameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"game"> | string
    start?: DateTimeWithAggregatesFilter<"game"> | Date | string
    end?: DateTimeNullableWithAggregatesFilter<"game"> | Date | string | null
  }

  export type game_participantWhereInput = {
    AND?: game_participantWhereInput | game_participantWhereInput[]
    OR?: game_participantWhereInput[]
    NOT?: game_participantWhereInput | game_participantWhereInput[]
    id?: StringFilter<"game_participant"> | string
    user_id?: StringFilter<"game_participant"> | string
    game_id?: StringFilter<"game_participant"> | string
    user_fk?: XOR<UserRelationFilter, userWhereInput>
    game_fk?: XOR<GameRelationFilter, gameWhereInput>
  }

  export type game_participantOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    user_fk?: userOrderByWithRelationInput
    game_fk?: gameOrderByWithRelationInput
  }

  export type game_participantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: game_participantWhereInput | game_participantWhereInput[]
    OR?: game_participantWhereInput[]
    NOT?: game_participantWhereInput | game_participantWhereInput[]
    user_id?: StringFilter<"game_participant"> | string
    game_id?: StringFilter<"game_participant"> | string
    user_fk?: XOR<UserRelationFilter, userWhereInput>
    game_fk?: XOR<GameRelationFilter, gameWhereInput>
  }, "id">

  export type game_participantOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    _count?: game_participantCountOrderByAggregateInput
    _max?: game_participantMaxOrderByAggregateInput
    _min?: game_participantMinOrderByAggregateInput
  }

  export type game_participantScalarWhereWithAggregatesInput = {
    AND?: game_participantScalarWhereWithAggregatesInput | game_participantScalarWhereWithAggregatesInput[]
    OR?: game_participantScalarWhereWithAggregatesInput[]
    NOT?: game_participantScalarWhereWithAggregatesInput | game_participantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"game_participant"> | string
    user_id?: StringWithAggregatesFilter<"game_participant"> | string
    game_id?: StringWithAggregatesFilter<"game_participant"> | string
  }

  export type moveWhereInput = {
    AND?: moveWhereInput | moveWhereInput[]
    OR?: moveWhereInput[]
    NOT?: moveWhereInput | moveWhereInput[]
    id?: StringFilter<"move"> | string
    fen_string?: StringFilter<"move"> | string
    timestamp?: DateTimeFilter<"move"> | Date | string
    user_id?: StringFilter<"move"> | string
    game_id?: StringFilter<"move"> | string
    user_fk?: XOR<UserRelationFilter, userWhereInput>
    game_fk?: XOR<GameRelationFilter, gameWhereInput>
  }

  export type moveOrderByWithRelationInput = {
    id?: SortOrder
    fen_string?: SortOrder
    timestamp?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    user_fk?: userOrderByWithRelationInput
    game_fk?: gameOrderByWithRelationInput
  }

  export type moveWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: moveWhereInput | moveWhereInput[]
    OR?: moveWhereInput[]
    NOT?: moveWhereInput | moveWhereInput[]
    fen_string?: StringFilter<"move"> | string
    timestamp?: DateTimeFilter<"move"> | Date | string
    user_id?: StringFilter<"move"> | string
    game_id?: StringFilter<"move"> | string
    user_fk?: XOR<UserRelationFilter, userWhereInput>
    game_fk?: XOR<GameRelationFilter, gameWhereInput>
  }, "id">

  export type moveOrderByWithAggregationInput = {
    id?: SortOrder
    fen_string?: SortOrder
    timestamp?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    _count?: moveCountOrderByAggregateInput
    _max?: moveMaxOrderByAggregateInput
    _min?: moveMinOrderByAggregateInput
  }

  export type moveScalarWhereWithAggregatesInput = {
    AND?: moveScalarWhereWithAggregatesInput | moveScalarWhereWithAggregatesInput[]
    OR?: moveScalarWhereWithAggregatesInput[]
    NOT?: moveScalarWhereWithAggregatesInput | moveScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"move"> | string
    fen_string?: StringWithAggregatesFilter<"move"> | string
    timestamp?: DateTimeWithAggregatesFilter<"move"> | Date | string
    user_id?: StringWithAggregatesFilter<"move"> | string
    game_id?: StringWithAggregatesFilter<"move"> | string
  }

  export type userCreateInput = {
    id?: string
    createdAt?: Date | string
    username: string
    password: string
    games?: game_participantCreateNestedManyWithoutUser_fkInput
    move?: moveCreateNestedManyWithoutUser_fkInput
  }

  export type userUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    username: string
    password: string
    games?: game_participantUncheckedCreateNestedManyWithoutUser_fkInput
    move?: moveUncheckedCreateNestedManyWithoutUser_fkInput
  }

  export type userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    games?: game_participantUpdateManyWithoutUser_fkNestedInput
    move?: moveUpdateManyWithoutUser_fkNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    games?: game_participantUncheckedUpdateManyWithoutUser_fkNestedInput
    move?: moveUncheckedUpdateManyWithoutUser_fkNestedInput
  }

  export type userCreateManyInput = {
    id?: string
    createdAt?: Date | string
    username: string
    password: string
  }

  export type userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type gameCreateInput = {
    id?: string
    start?: Date | string
    end?: Date | string | null
    user_games?: game_participantCreateNestedManyWithoutGame_fkInput
    move?: moveCreateNestedManyWithoutGame_fkInput
  }

  export type gameUncheckedCreateInput = {
    id?: string
    start?: Date | string
    end?: Date | string | null
    user_games?: game_participantUncheckedCreateNestedManyWithoutGame_fkInput
    move?: moveUncheckedCreateNestedManyWithoutGame_fkInput
  }

  export type gameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_games?: game_participantUpdateManyWithoutGame_fkNestedInput
    move?: moveUpdateManyWithoutGame_fkNestedInput
  }

  export type gameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_games?: game_participantUncheckedUpdateManyWithoutGame_fkNestedInput
    move?: moveUncheckedUpdateManyWithoutGame_fkNestedInput
  }

  export type gameCreateManyInput = {
    id?: string
    start?: Date | string
    end?: Date | string | null
  }

  export type gameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type gameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type game_participantCreateInput = {
    id?: string
    user_fk: userCreateNestedOneWithoutGamesInput
    game_fk: gameCreateNestedOneWithoutUser_gamesInput
  }

  export type game_participantUncheckedCreateInput = {
    id?: string
    user_id: string
    game_id: string
  }

  export type game_participantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_fk?: userUpdateOneRequiredWithoutGamesNestedInput
    game_fk?: gameUpdateOneRequiredWithoutUser_gamesNestedInput
  }

  export type game_participantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type game_participantCreateManyInput = {
    id?: string
    user_id: string
    game_id: string
  }

  export type game_participantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type game_participantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type moveCreateInput = {
    id?: string
    fen_string: string
    timestamp: Date | string
    user_fk: userCreateNestedOneWithoutMoveInput
    game_fk: gameCreateNestedOneWithoutMoveInput
  }

  export type moveUncheckedCreateInput = {
    id?: string
    fen_string: string
    timestamp: Date | string
    user_id: string
    game_id: string
  }

  export type moveUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user_fk?: userUpdateOneRequiredWithoutMoveNestedInput
    game_fk?: gameUpdateOneRequiredWithoutMoveNestedInput
  }

  export type moveUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type moveCreateManyInput = {
    id?: string
    fen_string: string
    timestamp: Date | string
    user_id: string
    game_id: string
  }

  export type moveUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type moveUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Game_participantListRelationFilter = {
    every?: game_participantWhereInput
    some?: game_participantWhereInput
    none?: game_participantWhereInput
  }

  export type MoveListRelationFilter = {
    every?: moveWhereInput
    some?: moveWhereInput
    none?: moveWhereInput
  }

  export type game_participantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type moveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type gameCountOrderByAggregateInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type gameMaxOrderByAggregateInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type gameMinOrderByAggregateInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type GameRelationFilter = {
    is?: gameWhereInput
    isNot?: gameWhereInput
  }

  export type game_participantCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type game_participantMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type game_participantMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type moveCountOrderByAggregateInput = {
    id?: SortOrder
    fen_string?: SortOrder
    timestamp?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type moveMaxOrderByAggregateInput = {
    id?: SortOrder
    fen_string?: SortOrder
    timestamp?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type moveMinOrderByAggregateInput = {
    id?: SortOrder
    fen_string?: SortOrder
    timestamp?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type game_participantCreateNestedManyWithoutUser_fkInput = {
    create?: XOR<game_participantCreateWithoutUser_fkInput, game_participantUncheckedCreateWithoutUser_fkInput> | game_participantCreateWithoutUser_fkInput[] | game_participantUncheckedCreateWithoutUser_fkInput[]
    connectOrCreate?: game_participantCreateOrConnectWithoutUser_fkInput | game_participantCreateOrConnectWithoutUser_fkInput[]
    createMany?: game_participantCreateManyUser_fkInputEnvelope
    connect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
  }

  export type moveCreateNestedManyWithoutUser_fkInput = {
    create?: XOR<moveCreateWithoutUser_fkInput, moveUncheckedCreateWithoutUser_fkInput> | moveCreateWithoutUser_fkInput[] | moveUncheckedCreateWithoutUser_fkInput[]
    connectOrCreate?: moveCreateOrConnectWithoutUser_fkInput | moveCreateOrConnectWithoutUser_fkInput[]
    createMany?: moveCreateManyUser_fkInputEnvelope
    connect?: moveWhereUniqueInput | moveWhereUniqueInput[]
  }

  export type game_participantUncheckedCreateNestedManyWithoutUser_fkInput = {
    create?: XOR<game_participantCreateWithoutUser_fkInput, game_participantUncheckedCreateWithoutUser_fkInput> | game_participantCreateWithoutUser_fkInput[] | game_participantUncheckedCreateWithoutUser_fkInput[]
    connectOrCreate?: game_participantCreateOrConnectWithoutUser_fkInput | game_participantCreateOrConnectWithoutUser_fkInput[]
    createMany?: game_participantCreateManyUser_fkInputEnvelope
    connect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
  }

  export type moveUncheckedCreateNestedManyWithoutUser_fkInput = {
    create?: XOR<moveCreateWithoutUser_fkInput, moveUncheckedCreateWithoutUser_fkInput> | moveCreateWithoutUser_fkInput[] | moveUncheckedCreateWithoutUser_fkInput[]
    connectOrCreate?: moveCreateOrConnectWithoutUser_fkInput | moveCreateOrConnectWithoutUser_fkInput[]
    createMany?: moveCreateManyUser_fkInputEnvelope
    connect?: moveWhereUniqueInput | moveWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type game_participantUpdateManyWithoutUser_fkNestedInput = {
    create?: XOR<game_participantCreateWithoutUser_fkInput, game_participantUncheckedCreateWithoutUser_fkInput> | game_participantCreateWithoutUser_fkInput[] | game_participantUncheckedCreateWithoutUser_fkInput[]
    connectOrCreate?: game_participantCreateOrConnectWithoutUser_fkInput | game_participantCreateOrConnectWithoutUser_fkInput[]
    upsert?: game_participantUpsertWithWhereUniqueWithoutUser_fkInput | game_participantUpsertWithWhereUniqueWithoutUser_fkInput[]
    createMany?: game_participantCreateManyUser_fkInputEnvelope
    set?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    disconnect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    delete?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    connect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    update?: game_participantUpdateWithWhereUniqueWithoutUser_fkInput | game_participantUpdateWithWhereUniqueWithoutUser_fkInput[]
    updateMany?: game_participantUpdateManyWithWhereWithoutUser_fkInput | game_participantUpdateManyWithWhereWithoutUser_fkInput[]
    deleteMany?: game_participantScalarWhereInput | game_participantScalarWhereInput[]
  }

  export type moveUpdateManyWithoutUser_fkNestedInput = {
    create?: XOR<moveCreateWithoutUser_fkInput, moveUncheckedCreateWithoutUser_fkInput> | moveCreateWithoutUser_fkInput[] | moveUncheckedCreateWithoutUser_fkInput[]
    connectOrCreate?: moveCreateOrConnectWithoutUser_fkInput | moveCreateOrConnectWithoutUser_fkInput[]
    upsert?: moveUpsertWithWhereUniqueWithoutUser_fkInput | moveUpsertWithWhereUniqueWithoutUser_fkInput[]
    createMany?: moveCreateManyUser_fkInputEnvelope
    set?: moveWhereUniqueInput | moveWhereUniqueInput[]
    disconnect?: moveWhereUniqueInput | moveWhereUniqueInput[]
    delete?: moveWhereUniqueInput | moveWhereUniqueInput[]
    connect?: moveWhereUniqueInput | moveWhereUniqueInput[]
    update?: moveUpdateWithWhereUniqueWithoutUser_fkInput | moveUpdateWithWhereUniqueWithoutUser_fkInput[]
    updateMany?: moveUpdateManyWithWhereWithoutUser_fkInput | moveUpdateManyWithWhereWithoutUser_fkInput[]
    deleteMany?: moveScalarWhereInput | moveScalarWhereInput[]
  }

  export type game_participantUncheckedUpdateManyWithoutUser_fkNestedInput = {
    create?: XOR<game_participantCreateWithoutUser_fkInput, game_participantUncheckedCreateWithoutUser_fkInput> | game_participantCreateWithoutUser_fkInput[] | game_participantUncheckedCreateWithoutUser_fkInput[]
    connectOrCreate?: game_participantCreateOrConnectWithoutUser_fkInput | game_participantCreateOrConnectWithoutUser_fkInput[]
    upsert?: game_participantUpsertWithWhereUniqueWithoutUser_fkInput | game_participantUpsertWithWhereUniqueWithoutUser_fkInput[]
    createMany?: game_participantCreateManyUser_fkInputEnvelope
    set?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    disconnect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    delete?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    connect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    update?: game_participantUpdateWithWhereUniqueWithoutUser_fkInput | game_participantUpdateWithWhereUniqueWithoutUser_fkInput[]
    updateMany?: game_participantUpdateManyWithWhereWithoutUser_fkInput | game_participantUpdateManyWithWhereWithoutUser_fkInput[]
    deleteMany?: game_participantScalarWhereInput | game_participantScalarWhereInput[]
  }

  export type moveUncheckedUpdateManyWithoutUser_fkNestedInput = {
    create?: XOR<moveCreateWithoutUser_fkInput, moveUncheckedCreateWithoutUser_fkInput> | moveCreateWithoutUser_fkInput[] | moveUncheckedCreateWithoutUser_fkInput[]
    connectOrCreate?: moveCreateOrConnectWithoutUser_fkInput | moveCreateOrConnectWithoutUser_fkInput[]
    upsert?: moveUpsertWithWhereUniqueWithoutUser_fkInput | moveUpsertWithWhereUniqueWithoutUser_fkInput[]
    createMany?: moveCreateManyUser_fkInputEnvelope
    set?: moveWhereUniqueInput | moveWhereUniqueInput[]
    disconnect?: moveWhereUniqueInput | moveWhereUniqueInput[]
    delete?: moveWhereUniqueInput | moveWhereUniqueInput[]
    connect?: moveWhereUniqueInput | moveWhereUniqueInput[]
    update?: moveUpdateWithWhereUniqueWithoutUser_fkInput | moveUpdateWithWhereUniqueWithoutUser_fkInput[]
    updateMany?: moveUpdateManyWithWhereWithoutUser_fkInput | moveUpdateManyWithWhereWithoutUser_fkInput[]
    deleteMany?: moveScalarWhereInput | moveScalarWhereInput[]
  }

  export type game_participantCreateNestedManyWithoutGame_fkInput = {
    create?: XOR<game_participantCreateWithoutGame_fkInput, game_participantUncheckedCreateWithoutGame_fkInput> | game_participantCreateWithoutGame_fkInput[] | game_participantUncheckedCreateWithoutGame_fkInput[]
    connectOrCreate?: game_participantCreateOrConnectWithoutGame_fkInput | game_participantCreateOrConnectWithoutGame_fkInput[]
    createMany?: game_participantCreateManyGame_fkInputEnvelope
    connect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
  }

  export type moveCreateNestedManyWithoutGame_fkInput = {
    create?: XOR<moveCreateWithoutGame_fkInput, moveUncheckedCreateWithoutGame_fkInput> | moveCreateWithoutGame_fkInput[] | moveUncheckedCreateWithoutGame_fkInput[]
    connectOrCreate?: moveCreateOrConnectWithoutGame_fkInput | moveCreateOrConnectWithoutGame_fkInput[]
    createMany?: moveCreateManyGame_fkInputEnvelope
    connect?: moveWhereUniqueInput | moveWhereUniqueInput[]
  }

  export type game_participantUncheckedCreateNestedManyWithoutGame_fkInput = {
    create?: XOR<game_participantCreateWithoutGame_fkInput, game_participantUncheckedCreateWithoutGame_fkInput> | game_participantCreateWithoutGame_fkInput[] | game_participantUncheckedCreateWithoutGame_fkInput[]
    connectOrCreate?: game_participantCreateOrConnectWithoutGame_fkInput | game_participantCreateOrConnectWithoutGame_fkInput[]
    createMany?: game_participantCreateManyGame_fkInputEnvelope
    connect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
  }

  export type moveUncheckedCreateNestedManyWithoutGame_fkInput = {
    create?: XOR<moveCreateWithoutGame_fkInput, moveUncheckedCreateWithoutGame_fkInput> | moveCreateWithoutGame_fkInput[] | moveUncheckedCreateWithoutGame_fkInput[]
    connectOrCreate?: moveCreateOrConnectWithoutGame_fkInput | moveCreateOrConnectWithoutGame_fkInput[]
    createMany?: moveCreateManyGame_fkInputEnvelope
    connect?: moveWhereUniqueInput | moveWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type game_participantUpdateManyWithoutGame_fkNestedInput = {
    create?: XOR<game_participantCreateWithoutGame_fkInput, game_participantUncheckedCreateWithoutGame_fkInput> | game_participantCreateWithoutGame_fkInput[] | game_participantUncheckedCreateWithoutGame_fkInput[]
    connectOrCreate?: game_participantCreateOrConnectWithoutGame_fkInput | game_participantCreateOrConnectWithoutGame_fkInput[]
    upsert?: game_participantUpsertWithWhereUniqueWithoutGame_fkInput | game_participantUpsertWithWhereUniqueWithoutGame_fkInput[]
    createMany?: game_participantCreateManyGame_fkInputEnvelope
    set?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    disconnect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    delete?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    connect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    update?: game_participantUpdateWithWhereUniqueWithoutGame_fkInput | game_participantUpdateWithWhereUniqueWithoutGame_fkInput[]
    updateMany?: game_participantUpdateManyWithWhereWithoutGame_fkInput | game_participantUpdateManyWithWhereWithoutGame_fkInput[]
    deleteMany?: game_participantScalarWhereInput | game_participantScalarWhereInput[]
  }

  export type moveUpdateManyWithoutGame_fkNestedInput = {
    create?: XOR<moveCreateWithoutGame_fkInput, moveUncheckedCreateWithoutGame_fkInput> | moveCreateWithoutGame_fkInput[] | moveUncheckedCreateWithoutGame_fkInput[]
    connectOrCreate?: moveCreateOrConnectWithoutGame_fkInput | moveCreateOrConnectWithoutGame_fkInput[]
    upsert?: moveUpsertWithWhereUniqueWithoutGame_fkInput | moveUpsertWithWhereUniqueWithoutGame_fkInput[]
    createMany?: moveCreateManyGame_fkInputEnvelope
    set?: moveWhereUniqueInput | moveWhereUniqueInput[]
    disconnect?: moveWhereUniqueInput | moveWhereUniqueInput[]
    delete?: moveWhereUniqueInput | moveWhereUniqueInput[]
    connect?: moveWhereUniqueInput | moveWhereUniqueInput[]
    update?: moveUpdateWithWhereUniqueWithoutGame_fkInput | moveUpdateWithWhereUniqueWithoutGame_fkInput[]
    updateMany?: moveUpdateManyWithWhereWithoutGame_fkInput | moveUpdateManyWithWhereWithoutGame_fkInput[]
    deleteMany?: moveScalarWhereInput | moveScalarWhereInput[]
  }

  export type game_participantUncheckedUpdateManyWithoutGame_fkNestedInput = {
    create?: XOR<game_participantCreateWithoutGame_fkInput, game_participantUncheckedCreateWithoutGame_fkInput> | game_participantCreateWithoutGame_fkInput[] | game_participantUncheckedCreateWithoutGame_fkInput[]
    connectOrCreate?: game_participantCreateOrConnectWithoutGame_fkInput | game_participantCreateOrConnectWithoutGame_fkInput[]
    upsert?: game_participantUpsertWithWhereUniqueWithoutGame_fkInput | game_participantUpsertWithWhereUniqueWithoutGame_fkInput[]
    createMany?: game_participantCreateManyGame_fkInputEnvelope
    set?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    disconnect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    delete?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    connect?: game_participantWhereUniqueInput | game_participantWhereUniqueInput[]
    update?: game_participantUpdateWithWhereUniqueWithoutGame_fkInput | game_participantUpdateWithWhereUniqueWithoutGame_fkInput[]
    updateMany?: game_participantUpdateManyWithWhereWithoutGame_fkInput | game_participantUpdateManyWithWhereWithoutGame_fkInput[]
    deleteMany?: game_participantScalarWhereInput | game_participantScalarWhereInput[]
  }

  export type moveUncheckedUpdateManyWithoutGame_fkNestedInput = {
    create?: XOR<moveCreateWithoutGame_fkInput, moveUncheckedCreateWithoutGame_fkInput> | moveCreateWithoutGame_fkInput[] | moveUncheckedCreateWithoutGame_fkInput[]
    connectOrCreate?: moveCreateOrConnectWithoutGame_fkInput | moveCreateOrConnectWithoutGame_fkInput[]
    upsert?: moveUpsertWithWhereUniqueWithoutGame_fkInput | moveUpsertWithWhereUniqueWithoutGame_fkInput[]
    createMany?: moveCreateManyGame_fkInputEnvelope
    set?: moveWhereUniqueInput | moveWhereUniqueInput[]
    disconnect?: moveWhereUniqueInput | moveWhereUniqueInput[]
    delete?: moveWhereUniqueInput | moveWhereUniqueInput[]
    connect?: moveWhereUniqueInput | moveWhereUniqueInput[]
    update?: moveUpdateWithWhereUniqueWithoutGame_fkInput | moveUpdateWithWhereUniqueWithoutGame_fkInput[]
    updateMany?: moveUpdateManyWithWhereWithoutGame_fkInput | moveUpdateManyWithWhereWithoutGame_fkInput[]
    deleteMany?: moveScalarWhereInput | moveScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutGamesInput = {
    create?: XOR<userCreateWithoutGamesInput, userUncheckedCreateWithoutGamesInput>
    connectOrCreate?: userCreateOrConnectWithoutGamesInput
    connect?: userWhereUniqueInput
  }

  export type gameCreateNestedOneWithoutUser_gamesInput = {
    create?: XOR<gameCreateWithoutUser_gamesInput, gameUncheckedCreateWithoutUser_gamesInput>
    connectOrCreate?: gameCreateOrConnectWithoutUser_gamesInput
    connect?: gameWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutGamesNestedInput = {
    create?: XOR<userCreateWithoutGamesInput, userUncheckedCreateWithoutGamesInput>
    connectOrCreate?: userCreateOrConnectWithoutGamesInput
    upsert?: userUpsertWithoutGamesInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutGamesInput, userUpdateWithoutGamesInput>, userUncheckedUpdateWithoutGamesInput>
  }

  export type gameUpdateOneRequiredWithoutUser_gamesNestedInput = {
    create?: XOR<gameCreateWithoutUser_gamesInput, gameUncheckedCreateWithoutUser_gamesInput>
    connectOrCreate?: gameCreateOrConnectWithoutUser_gamesInput
    upsert?: gameUpsertWithoutUser_gamesInput
    connect?: gameWhereUniqueInput
    update?: XOR<XOR<gameUpdateToOneWithWhereWithoutUser_gamesInput, gameUpdateWithoutUser_gamesInput>, gameUncheckedUpdateWithoutUser_gamesInput>
  }

  export type userCreateNestedOneWithoutMoveInput = {
    create?: XOR<userCreateWithoutMoveInput, userUncheckedCreateWithoutMoveInput>
    connectOrCreate?: userCreateOrConnectWithoutMoveInput
    connect?: userWhereUniqueInput
  }

  export type gameCreateNestedOneWithoutMoveInput = {
    create?: XOR<gameCreateWithoutMoveInput, gameUncheckedCreateWithoutMoveInput>
    connectOrCreate?: gameCreateOrConnectWithoutMoveInput
    connect?: gameWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutMoveNestedInput = {
    create?: XOR<userCreateWithoutMoveInput, userUncheckedCreateWithoutMoveInput>
    connectOrCreate?: userCreateOrConnectWithoutMoveInput
    upsert?: userUpsertWithoutMoveInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutMoveInput, userUpdateWithoutMoveInput>, userUncheckedUpdateWithoutMoveInput>
  }

  export type gameUpdateOneRequiredWithoutMoveNestedInput = {
    create?: XOR<gameCreateWithoutMoveInput, gameUncheckedCreateWithoutMoveInput>
    connectOrCreate?: gameCreateOrConnectWithoutMoveInput
    upsert?: gameUpsertWithoutMoveInput
    connect?: gameWhereUniqueInput
    update?: XOR<XOR<gameUpdateToOneWithWhereWithoutMoveInput, gameUpdateWithoutMoveInput>, gameUncheckedUpdateWithoutMoveInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type game_participantCreateWithoutUser_fkInput = {
    id?: string
    game_fk: gameCreateNestedOneWithoutUser_gamesInput
  }

  export type game_participantUncheckedCreateWithoutUser_fkInput = {
    id?: string
    game_id: string
  }

  export type game_participantCreateOrConnectWithoutUser_fkInput = {
    where: game_participantWhereUniqueInput
    create: XOR<game_participantCreateWithoutUser_fkInput, game_participantUncheckedCreateWithoutUser_fkInput>
  }

  export type game_participantCreateManyUser_fkInputEnvelope = {
    data: game_participantCreateManyUser_fkInput | game_participantCreateManyUser_fkInput[]
    skipDuplicates?: boolean
  }

  export type moveCreateWithoutUser_fkInput = {
    id?: string
    fen_string: string
    timestamp: Date | string
    game_fk: gameCreateNestedOneWithoutMoveInput
  }

  export type moveUncheckedCreateWithoutUser_fkInput = {
    id?: string
    fen_string: string
    timestamp: Date | string
    game_id: string
  }

  export type moveCreateOrConnectWithoutUser_fkInput = {
    where: moveWhereUniqueInput
    create: XOR<moveCreateWithoutUser_fkInput, moveUncheckedCreateWithoutUser_fkInput>
  }

  export type moveCreateManyUser_fkInputEnvelope = {
    data: moveCreateManyUser_fkInput | moveCreateManyUser_fkInput[]
    skipDuplicates?: boolean
  }

  export type game_participantUpsertWithWhereUniqueWithoutUser_fkInput = {
    where: game_participantWhereUniqueInput
    update: XOR<game_participantUpdateWithoutUser_fkInput, game_participantUncheckedUpdateWithoutUser_fkInput>
    create: XOR<game_participantCreateWithoutUser_fkInput, game_participantUncheckedCreateWithoutUser_fkInput>
  }

  export type game_participantUpdateWithWhereUniqueWithoutUser_fkInput = {
    where: game_participantWhereUniqueInput
    data: XOR<game_participantUpdateWithoutUser_fkInput, game_participantUncheckedUpdateWithoutUser_fkInput>
  }

  export type game_participantUpdateManyWithWhereWithoutUser_fkInput = {
    where: game_participantScalarWhereInput
    data: XOR<game_participantUpdateManyMutationInput, game_participantUncheckedUpdateManyWithoutUser_fkInput>
  }

  export type game_participantScalarWhereInput = {
    AND?: game_participantScalarWhereInput | game_participantScalarWhereInput[]
    OR?: game_participantScalarWhereInput[]
    NOT?: game_participantScalarWhereInput | game_participantScalarWhereInput[]
    id?: StringFilter<"game_participant"> | string
    user_id?: StringFilter<"game_participant"> | string
    game_id?: StringFilter<"game_participant"> | string
  }

  export type moveUpsertWithWhereUniqueWithoutUser_fkInput = {
    where: moveWhereUniqueInput
    update: XOR<moveUpdateWithoutUser_fkInput, moveUncheckedUpdateWithoutUser_fkInput>
    create: XOR<moveCreateWithoutUser_fkInput, moveUncheckedCreateWithoutUser_fkInput>
  }

  export type moveUpdateWithWhereUniqueWithoutUser_fkInput = {
    where: moveWhereUniqueInput
    data: XOR<moveUpdateWithoutUser_fkInput, moveUncheckedUpdateWithoutUser_fkInput>
  }

  export type moveUpdateManyWithWhereWithoutUser_fkInput = {
    where: moveScalarWhereInput
    data: XOR<moveUpdateManyMutationInput, moveUncheckedUpdateManyWithoutUser_fkInput>
  }

  export type moveScalarWhereInput = {
    AND?: moveScalarWhereInput | moveScalarWhereInput[]
    OR?: moveScalarWhereInput[]
    NOT?: moveScalarWhereInput | moveScalarWhereInput[]
    id?: StringFilter<"move"> | string
    fen_string?: StringFilter<"move"> | string
    timestamp?: DateTimeFilter<"move"> | Date | string
    user_id?: StringFilter<"move"> | string
    game_id?: StringFilter<"move"> | string
  }

  export type game_participantCreateWithoutGame_fkInput = {
    id?: string
    user_fk: userCreateNestedOneWithoutGamesInput
  }

  export type game_participantUncheckedCreateWithoutGame_fkInput = {
    id?: string
    user_id: string
  }

  export type game_participantCreateOrConnectWithoutGame_fkInput = {
    where: game_participantWhereUniqueInput
    create: XOR<game_participantCreateWithoutGame_fkInput, game_participantUncheckedCreateWithoutGame_fkInput>
  }

  export type game_participantCreateManyGame_fkInputEnvelope = {
    data: game_participantCreateManyGame_fkInput | game_participantCreateManyGame_fkInput[]
    skipDuplicates?: boolean
  }

  export type moveCreateWithoutGame_fkInput = {
    id?: string
    fen_string: string
    timestamp: Date | string
    user_fk: userCreateNestedOneWithoutMoveInput
  }

  export type moveUncheckedCreateWithoutGame_fkInput = {
    id?: string
    fen_string: string
    timestamp: Date | string
    user_id: string
  }

  export type moveCreateOrConnectWithoutGame_fkInput = {
    where: moveWhereUniqueInput
    create: XOR<moveCreateWithoutGame_fkInput, moveUncheckedCreateWithoutGame_fkInput>
  }

  export type moveCreateManyGame_fkInputEnvelope = {
    data: moveCreateManyGame_fkInput | moveCreateManyGame_fkInput[]
    skipDuplicates?: boolean
  }

  export type game_participantUpsertWithWhereUniqueWithoutGame_fkInput = {
    where: game_participantWhereUniqueInput
    update: XOR<game_participantUpdateWithoutGame_fkInput, game_participantUncheckedUpdateWithoutGame_fkInput>
    create: XOR<game_participantCreateWithoutGame_fkInput, game_participantUncheckedCreateWithoutGame_fkInput>
  }

  export type game_participantUpdateWithWhereUniqueWithoutGame_fkInput = {
    where: game_participantWhereUniqueInput
    data: XOR<game_participantUpdateWithoutGame_fkInput, game_participantUncheckedUpdateWithoutGame_fkInput>
  }

  export type game_participantUpdateManyWithWhereWithoutGame_fkInput = {
    where: game_participantScalarWhereInput
    data: XOR<game_participantUpdateManyMutationInput, game_participantUncheckedUpdateManyWithoutGame_fkInput>
  }

  export type moveUpsertWithWhereUniqueWithoutGame_fkInput = {
    where: moveWhereUniqueInput
    update: XOR<moveUpdateWithoutGame_fkInput, moveUncheckedUpdateWithoutGame_fkInput>
    create: XOR<moveCreateWithoutGame_fkInput, moveUncheckedCreateWithoutGame_fkInput>
  }

  export type moveUpdateWithWhereUniqueWithoutGame_fkInput = {
    where: moveWhereUniqueInput
    data: XOR<moveUpdateWithoutGame_fkInput, moveUncheckedUpdateWithoutGame_fkInput>
  }

  export type moveUpdateManyWithWhereWithoutGame_fkInput = {
    where: moveScalarWhereInput
    data: XOR<moveUpdateManyMutationInput, moveUncheckedUpdateManyWithoutGame_fkInput>
  }

  export type userCreateWithoutGamesInput = {
    id?: string
    createdAt?: Date | string
    username: string
    password: string
    move?: moveCreateNestedManyWithoutUser_fkInput
  }

  export type userUncheckedCreateWithoutGamesInput = {
    id?: string
    createdAt?: Date | string
    username: string
    password: string
    move?: moveUncheckedCreateNestedManyWithoutUser_fkInput
  }

  export type userCreateOrConnectWithoutGamesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutGamesInput, userUncheckedCreateWithoutGamesInput>
  }

  export type gameCreateWithoutUser_gamesInput = {
    id?: string
    start?: Date | string
    end?: Date | string | null
    move?: moveCreateNestedManyWithoutGame_fkInput
  }

  export type gameUncheckedCreateWithoutUser_gamesInput = {
    id?: string
    start?: Date | string
    end?: Date | string | null
    move?: moveUncheckedCreateNestedManyWithoutGame_fkInput
  }

  export type gameCreateOrConnectWithoutUser_gamesInput = {
    where: gameWhereUniqueInput
    create: XOR<gameCreateWithoutUser_gamesInput, gameUncheckedCreateWithoutUser_gamesInput>
  }

  export type userUpsertWithoutGamesInput = {
    update: XOR<userUpdateWithoutGamesInput, userUncheckedUpdateWithoutGamesInput>
    create: XOR<userCreateWithoutGamesInput, userUncheckedCreateWithoutGamesInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutGamesInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutGamesInput, userUncheckedUpdateWithoutGamesInput>
  }

  export type userUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    move?: moveUpdateManyWithoutUser_fkNestedInput
  }

  export type userUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    move?: moveUncheckedUpdateManyWithoutUser_fkNestedInput
  }

  export type gameUpsertWithoutUser_gamesInput = {
    update: XOR<gameUpdateWithoutUser_gamesInput, gameUncheckedUpdateWithoutUser_gamesInput>
    create: XOR<gameCreateWithoutUser_gamesInput, gameUncheckedCreateWithoutUser_gamesInput>
    where?: gameWhereInput
  }

  export type gameUpdateToOneWithWhereWithoutUser_gamesInput = {
    where?: gameWhereInput
    data: XOR<gameUpdateWithoutUser_gamesInput, gameUncheckedUpdateWithoutUser_gamesInput>
  }

  export type gameUpdateWithoutUser_gamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    move?: moveUpdateManyWithoutGame_fkNestedInput
  }

  export type gameUncheckedUpdateWithoutUser_gamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    move?: moveUncheckedUpdateManyWithoutGame_fkNestedInput
  }

  export type userCreateWithoutMoveInput = {
    id?: string
    createdAt?: Date | string
    username: string
    password: string
    games?: game_participantCreateNestedManyWithoutUser_fkInput
  }

  export type userUncheckedCreateWithoutMoveInput = {
    id?: string
    createdAt?: Date | string
    username: string
    password: string
    games?: game_participantUncheckedCreateNestedManyWithoutUser_fkInput
  }

  export type userCreateOrConnectWithoutMoveInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutMoveInput, userUncheckedCreateWithoutMoveInput>
  }

  export type gameCreateWithoutMoveInput = {
    id?: string
    start?: Date | string
    end?: Date | string | null
    user_games?: game_participantCreateNestedManyWithoutGame_fkInput
  }

  export type gameUncheckedCreateWithoutMoveInput = {
    id?: string
    start?: Date | string
    end?: Date | string | null
    user_games?: game_participantUncheckedCreateNestedManyWithoutGame_fkInput
  }

  export type gameCreateOrConnectWithoutMoveInput = {
    where: gameWhereUniqueInput
    create: XOR<gameCreateWithoutMoveInput, gameUncheckedCreateWithoutMoveInput>
  }

  export type userUpsertWithoutMoveInput = {
    update: XOR<userUpdateWithoutMoveInput, userUncheckedUpdateWithoutMoveInput>
    create: XOR<userCreateWithoutMoveInput, userUncheckedCreateWithoutMoveInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutMoveInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutMoveInput, userUncheckedUpdateWithoutMoveInput>
  }

  export type userUpdateWithoutMoveInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    games?: game_participantUpdateManyWithoutUser_fkNestedInput
  }

  export type userUncheckedUpdateWithoutMoveInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    games?: game_participantUncheckedUpdateManyWithoutUser_fkNestedInput
  }

  export type gameUpsertWithoutMoveInput = {
    update: XOR<gameUpdateWithoutMoveInput, gameUncheckedUpdateWithoutMoveInput>
    create: XOR<gameCreateWithoutMoveInput, gameUncheckedCreateWithoutMoveInput>
    where?: gameWhereInput
  }

  export type gameUpdateToOneWithWhereWithoutMoveInput = {
    where?: gameWhereInput
    data: XOR<gameUpdateWithoutMoveInput, gameUncheckedUpdateWithoutMoveInput>
  }

  export type gameUpdateWithoutMoveInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_games?: game_participantUpdateManyWithoutGame_fkNestedInput
  }

  export type gameUncheckedUpdateWithoutMoveInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_games?: game_participantUncheckedUpdateManyWithoutGame_fkNestedInput
  }

  export type game_participantCreateManyUser_fkInput = {
    id?: string
    game_id: string
  }

  export type moveCreateManyUser_fkInput = {
    id?: string
    fen_string: string
    timestamp: Date | string
    game_id: string
  }

  export type game_participantUpdateWithoutUser_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_fk?: gameUpdateOneRequiredWithoutUser_gamesNestedInput
  }

  export type game_participantUncheckedUpdateWithoutUser_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type game_participantUncheckedUpdateManyWithoutUser_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type moveUpdateWithoutUser_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    game_fk?: gameUpdateOneRequiredWithoutMoveNestedInput
  }

  export type moveUncheckedUpdateWithoutUser_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type moveUncheckedUpdateManyWithoutUser_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type game_participantCreateManyGame_fkInput = {
    id?: string
    user_id: string
  }

  export type moveCreateManyGame_fkInput = {
    id?: string
    fen_string: string
    timestamp: Date | string
    user_id: string
  }

  export type game_participantUpdateWithoutGame_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_fk?: userUpdateOneRequiredWithoutGamesNestedInput
  }

  export type game_participantUncheckedUpdateWithoutGame_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type game_participantUncheckedUpdateManyWithoutGame_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type moveUpdateWithoutGame_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user_fk?: userUpdateOneRequiredWithoutMoveNestedInput
  }

  export type moveUncheckedUpdateWithoutGame_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type moveUncheckedUpdateManyWithoutGame_fkInput = {
    id?: StringFieldUpdateOperationsInput | string
    fen_string?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameCountOutputTypeDefaultArgs instead
     */
    export type GameCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use gameDefaultArgs instead
     */
    export type gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = gameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use game_participantDefaultArgs instead
     */
    export type game_participantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = game_participantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use moveDefaultArgs instead
     */
    export type moveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = moveDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}